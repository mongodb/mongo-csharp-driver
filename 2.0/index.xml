<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB .NET Driver</title>
    <link>/mongo-csharp-driver/2.0/</link>
    <description>Recent content on MongoDB .NET Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 May 2015 15:36:56 +0000</lastBuildDate>
    <atom:link href="/mongo-csharp-driver/2.0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Managing Users</title>
      <link>/mongo-csharp-driver/2.0/examples/user_management/</link>
      <pubDate>Fri, 29 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/examples/user_management/</guid>
      <description>

&lt;h2 id=&#34;how-to-manage-users&#34;&gt;How to Manage Users&lt;/h2&gt;

&lt;p&gt;While MongoDB supports many user management commands, the driver does not have any helpers for them because users are generally managed from the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/mongo-shell/
&#34;&gt;MongoDB shell&lt;/a&gt;. However, it is still possible to manage users from the driver by using the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_RunCommandAsync__1.htm
&#34;&gt;&lt;code&gt;IMongoDatabase.RunCommandAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;listing-users&#34;&gt;Listing Users&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/usersInfo/
&#34;&gt;&lt;code&gt;usersInfo&lt;/code&gt;&lt;/a&gt; command will provide information about users in a specific database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// construct the usersInfo command
var command = new BsonDocument(&amp;quot;usersInfo&amp;quot;, 1);

// Run the command. If it fails, an exception will be thrown.
var result = await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; variable will contain a field called &amp;ldquo;users&amp;rdquo; which will contain all the users for the &amp;ldquo;products&amp;rdquo; database.&lt;/p&gt;

&lt;h2 id=&#34;creating-users&#34;&gt;Creating Users&lt;/h2&gt;

&lt;p&gt;The following example uses the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/createUser/
&#34;&gt;&lt;code&gt;createUser&lt;/code&gt;&lt;/a&gt; command to add a user to a dataase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// Construct the write concern
var writeConcern = WriteConcern.WMajority
    .With(wTimeout: TimeSpan.FromMilliseconds(5000);

// Construct the createUser command.
var command = new BsonDocument
{
    { &amp;quot;createUser&amp;quot;, &amp;quot;accountAdmin01&amp;quot; },
    { &amp;quot;pwd&amp;quot;, &amp;quot;cleartext password&amp;quot; },
    { &amp;quot;customData&amp;quot;, new BsonDocument(&amp;quot;employeeId&amp;quot;, 12345) },
    { &amp;quot;roles&amp;quot;, new BsonArray
               {
                   new BsonDocument
                   {
                       { &amp;quot;role&amp;quot;, &amp;quot;clusterAdmin&amp;quot; },
                       { &amp;quot;db&amp;quot;, &amp;quot;admin&amp;quot; }   
                   },
                   new BsonDocument
                   {
                       { &amp;quot;role&amp;quot;, &amp;quot;readAnyDatabase&amp;quot; },
                       { &amp;quot;db&amp;quot;, &amp;quot;admin&amp;quot; }   
                   },
                   &amp;quot;readWrite&amp;quot;
               }},
    { &amp;quot;writeConcern&amp;quot;, writeConcern.ToBsonDocument() }
};

// Run the command. If it fails, an exception will be thrown.
await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-users&#34;&gt;Updating Users&lt;/h2&gt;

&lt;p&gt;The following example uses the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/updateUser/
&#34;&gt;&lt;code&gt;updateUser&lt;/code&gt;&lt;/a&gt; command to update a user in a database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// Construct the updateUser command.
var command = new BsonDocument
{
    { &amp;quot;updateUser&amp;quot;, &amp;quot;appClient01&amp;quot; },
    { &amp;quot;customData&amp;quot;, new BsonDocument(&amp;quot;employeeId&amp;quot;, &amp;quot;0x3039&amp;quot;) },
    { &amp;quot;roles&amp;quot;, new BsonArray
               {
                   new BsonDocument
                   {
                       { &amp;quot;role&amp;quot;, &amp;quot;read&amp;quot; },
                       { &amp;quot;db&amp;quot;, &amp;quot;assets&amp;quot; }   
                   },
               }}
};

// Run the command. If it fails, an exception will be thrown.
await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dropping-users&#34;&gt;Dropping Users&lt;/h2&gt;

&lt;p&gt;The following example uses the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/dropUser/
&#34;&gt;&lt;code&gt;dropUser&lt;/code&gt;&lt;/a&gt; command to drop a user from a database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// Construct the dropUser command.
var command = @&amp;quot;{ dropUser: &amp;quot;&amp;quot;accountAdmin01&amp;quot;&amp;quot;,
                  writeConcern: { w: &amp;quot;&amp;quot;majority&amp;quot;&amp;quot;, wtimeout: 5000 }
                }&amp;quot;;

// Run the command. If it fails, an exception will be thrown.
await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Even though we used a string here for the command, it could have been a BsonDocument like the other examples. Well-formed strings of valid JSON are interchangeable with BsonDocument.
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;other-user-management-commands&#34;&gt;Other User Management Commands&lt;/h2&gt;

&lt;p&gt;There are a number of &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/nav-user-management/
&#34;&gt;other commands&lt;/a&gt; that exist for managing users and each would be run in a similar fashion to how ones demonstrated above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Tailable Cursor</title>
      <link>/mongo-csharp-driver/2.0/examples/tailable_cursor/</link>
      <pubDate>Tue, 26 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/examples/tailable_cursor/</guid>
      <description>

&lt;h2 id=&#34;using-a-tailable-cursor&#34;&gt;Using a Tailable Cursor&lt;/h2&gt;

&lt;p&gt;MongoDB offers the option to watch a &lt;a href=&#34;https://www.mongodb.com/docs/manual/manual/core/capped-collections/
&#34;&gt;capped collection&lt;/a&gt; for changes using a &lt;a href=&#34;https://www.mongodb.com/docs/manual/manual/tutorial/create-tailable-cursor/
&#34;&gt;tailable cursor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code below &amp;ldquo;tails&amp;rdquo; the capped collection and outputs documents to the console as they are added. The method also handles the possibility of a dead cursor by tracking the field &lt;code&gt;insertDate&lt;/code&gt;. New documents are added with increasing values of &lt;code&gt;insertDate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Even though we are using &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; below, it is possible to use an application defined class by replacing the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; references with that of your application defined class.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private static async Task TailCollectionAsync(IMongoCollection&amp;lt;BsonDocument&amp;gt; collection)
{
    // Set lastValue to the smallest value possible
    BsonValue lastValue = BsonMinKey.Value;
    
    var options = new FindOptions&amp;lt;BsonDocument&amp;gt; 
    { 
        // Our cursor is a tailable cursor and informs the server to await
        CursorType = CursorType.TailableAwait
    };
    
    // Initially, we don&#39;t have a filter. An empty BsonDocument matches everything.
    BsonDocument filter = new BsonDocument();
    
    // NOTE: This loops forever. It would be prudent to provide some form of 
    // an escape condition based on your needs; e.g. the user presses a key.
    while (true)
    {
        // Start the cursor and wait for the initial response
        using (var cursor = await collection.FindAsync(filter, options))
        {
            // This callback will get invoked with each new document found
            await cursor.ForEachAsync(document =&amp;gt;
            {
                // Set the last value we saw 
                lastValue = document[&amp;quot;insertDate&amp;quot;];
                
                // Write the document to the console.
                await Console.WriteLineAsync(document.ToString());
            });
        }

        // The tailable cursor died so loop through and restart it
        // Now, we want documents that are strictly greater than the last value we saw
        filter = new BsonDocument(&amp;quot;$gt&amp;quot;, new BsonDocument(&amp;quot;insertDate&amp;quot;, lastId));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If multiple documents might have the exact same insert date, then using the above logic might cause you to miss some documents in the event that the cursor gets restarted. To solve this,
you could track all the documents you&amp;rsquo;ve seen by their identifiers for the same &lt;code&gt;lastValue&lt;/code&gt; and ignore them in the callback. In addition, you would need to change the &lt;code&gt;$gt&lt;/code&gt; condition to &lt;code&gt;$gte&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mixing Static and Dynamic Data</title>
      <link>/mongo-csharp-driver/2.0/examples/mixing_static_and_dynamic/</link>
      <pubDate>Tue, 26 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/examples/mixing_static_and_dynamic/</guid>
      <description>

&lt;h2 id=&#34;mixing-static-and-dynamic-data&#34;&gt;Mixing Static and Dynamic Data&lt;/h2&gt;

&lt;p&gt;Many applications have the notion of known data and unknown data. One such example would be a Blog application where there exists the known data (content, created date, tags) and unknown data (metadata) which a user is allowed to configure.&lt;/p&gt;

&lt;h2 id=&#34;the-class&#34;&gt;The Class&lt;/h2&gt;

&lt;p&gt;Continuing with the Blog example, below is how we might model the static content for a post.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Post
{
    public ObjectId Id { get; set; }
  
    public string Content { get; set; }
  
    public DateTime CreatedAtUtc { get; set; }
  
    public List&amp;lt;string&amp;gt; Tags { get; set; }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to include dynamic data, we have 2 options.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
It is still possible to filter, sort, project, update, etc&amp;hellip; this dynamic data using the same tooling described in our &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/definitions/&#34;&gt;reference documentation&lt;/a&gt;.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;bsondocument-property&#34;&gt;BsonDocument Property&lt;/h3&gt;

&lt;p&gt;The first option is to include a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;. Our class would then look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Post
{
    // previous properties
  
    public BsonDocument Metadata { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then put all the dynamic data into the &lt;code&gt;Metadata&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var post = new Post
{
    Content = &amp;quot;My Post Content&amp;quot;,
    CreatedAtUtc = DateTime.UtcNow,
    Tags = new List&amp;lt;string&amp;gt; { &amp;quot;first&amp;quot;, &amp;quot;post&amp;quot; },
    Metadata = new BsonDocument(&amp;quot;rel&amp;quot;, &amp;quot;mongodb&amp;quot;)
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, we set the static properties, but also added a &lt;code&gt;rel&lt;/code&gt; field with a value of &lt;code&gt;mongodb&lt;/code&gt; to our metadata. Not all documents may have the &lt;code&gt;rel&lt;/code&gt; field because it isn&amp;rsquo;t part of the schema. The above document would look like this in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5564b6c11de315e733f173cf&amp;quot;),
    &amp;quot;Content&amp;quot;: &amp;quot;My Post Content&amp;quot;,
    &amp;quot;CreatedAtUtc&amp;quot; : ISODate(&amp;quot;2015-05-26T18:09:05.883Z&amp;quot;),
    &amp;quot;Tags&amp;quot; : [&amp;quot;first&amp;quot;, &amp;quot;post&amp;quot;],
    &amp;quot;Metadata&amp;quot;: {
        &amp;quot;rel&amp;quot;: &amp;quot;mongodb&amp;quot;   
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this method, all our &amp;ldquo;dynamic&amp;rdquo; data is stored underneath the &lt;code&gt;Metadata&lt;/code&gt; field.&lt;/p&gt;

&lt;h3 id=&#34;extra-elements&#34;&gt;Extra Elements&lt;/h3&gt;

&lt;p&gt;The second option is to store dynamic data using the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#supporting-extra-elements&#34;&gt;extra elements&lt;/a&gt; feature in the Bson library.&lt;/p&gt;

&lt;p&gt;Our full class would like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Post
{
    public ObjectId Id { get; set; }
  
    public string Content { get; set; }
  
    public DateTime CreatedAtUtc { get; set; }
  
    public List&amp;lt;string&amp;gt; Tags { get; set; }  
    
    [BsonExtraElements]
    public BsonDocument Metadata { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the following code to create &lt;code&gt;Post&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var post = new Post
{
    Content = &amp;quot;My Post Content&amp;quot;,
    CreatedAtUtc = DateTime.UtcNow,
    Tags = new List&amp;lt;string&amp;gt; { &amp;quot;first&amp;quot;, &amp;quot;post&amp;quot; },
    Metadata = new BsonDocument(&amp;quot;rel&amp;quot;, &amp;quot;mongodb&amp;quot;)
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our document in the database would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5564b6c11de315e733f173cf&amp;quot;),
    &amp;quot;Content&amp;quot;: &amp;quot;My Post Content&amp;quot;,
    &amp;quot;CreatedAtUtc&amp;quot; : ISODate(&amp;quot;2015-05-26T18:09:05.883Z&amp;quot;),
    &amp;quot;Tags&amp;quot; : [&amp;quot;first&amp;quot;, &amp;quot;post&amp;quot;],
    &amp;quot;rel&amp;quot;: &amp;quot;mongodb&amp;quot;   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this method, the &lt;code&gt;rel&lt;/code&gt; field is stored inline with the static content.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition warning&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;warning&lt;/h5&gt;
There is a danger with this approach that dynamic field names could clash with names already being used by members of the class.
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Administration</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/admin/</link>
      <pubDate>Thu, 07 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/admin/</guid>
      <description>

&lt;h2 id=&#34;adminstration&#34;&gt;Adminstration&lt;/h2&gt;

&lt;p&gt;The administration operations exist in multiple places in the driver&amp;rsquo;s API. Database-related operations exist on the database object and collection-related operations exist on the collection object. If there isn&amp;rsquo;t a method for the admin operation you want to use, the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_RunCommandAsync__1.htm
&#34;&gt;&lt;code&gt;RunCommandAsync&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; is available.&lt;/p&gt;

&lt;h2 id=&#34;databases&#34;&gt;Databases&lt;/h2&gt;

&lt;p&gt;These operations exist on the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoClient.htm
&#34;&gt;&lt;code&gt;IMongoClient&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;

&lt;h3 id=&#34;getting-a-database&#34;&gt;Getting a database&lt;/h3&gt;

&lt;p&gt;To get a database, use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoClient_GetDatabase.htm
&#34;&gt;&lt;code&gt;GetDatabase&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;There is no command for creating a database. The database will be created the first time it is used.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the test database
var db = client.GetDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-a-database&#34;&gt;Dropping a database&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoClient_DropDatabaseAsync.htm
&#34;&gt;&lt;code&gt;DropDatabaseAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// drops the test database
await client.DropDatabaseAsync(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listing-the-databases&#34;&gt;Listing the databases&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoClient_ListDatabasesAsync.htm
&#34;&gt;&lt;code&gt;ListDatabasesAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var cursor = await client.ListDatabaseAsync())
{
    var list = await cursor.ToListAsync();
    // do something with the list
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;collections&#34;&gt;Collections&lt;/h2&gt;

&lt;p&gt;These operations exists on the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;

&lt;h3 id=&#34;getting-a-collection&#34;&gt;Getting a collection&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_GetCollection__1.htm
&#34;&gt;&lt;code&gt;GetCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; method returns an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The generic parameter on the method defines the schema your application will use when working with the collection. Generally, this type will either be a &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/bson_document/&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; which provides no schema enforcement or a &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/&#34;&gt;mapped class (POCO)&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// gets a collection named &amp;quot;foo&amp;quot; using a BsonDocument
var collection = db.GetCollection&amp;lt;BsonDocument&amp;gt;(&amp;quot;foo&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on working with collections, see the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/crud/&#34;&gt;CRUD Operations section&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-collection&#34;&gt;Creating a collection&lt;/h3&gt;

&lt;p&gt;Just like databases, there is no need to create a collection before working with it. It will be created upon first use. However, certain features of collections require explicit creation. The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_CreateCollectionAsync.htm
&#34;&gt;&lt;code&gt;CreateCollectionAsync&lt;/code&gt;&lt;/a&gt; method allows you to specify not only a name, but also &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_CreateCollectionOptions.htm
&#34;&gt;&lt;code&gt;CreateCollectionOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// creates a capped collection named &amp;quot;foo&amp;quot; with a maximum size of 10,000 bytes
await db.CreateCollectionAsync(
    &amp;quot;foo&amp;quot;, 
    new CreateCollectionOptions
    {
        Capped = true,
        MaxSize = 10000
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-a-collection&#34;&gt;Dropping a collection&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_DropCollectionAsync.htm
&#34;&gt;&lt;code&gt;DropCollectionAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// drops the &amp;quot;foo&amp;quot; collection
await db.DropCollectionAsync(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listing-the-collections&#34;&gt;Listing the collections&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_ListCollectionsAsync.htm
&#34;&gt;&lt;code&gt;ListCollectionsAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var cursor = await db.ListCollectionsAsync())
{
    var list = await cursor.ToListAsync();
    // do something with the list
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;renaming-a-collection&#34;&gt;Renaming a collection&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_RenameCollectionAsync.htm
&#34;&gt;&lt;code&gt;RenameCollectionAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// rename the &amp;quot;foo&amp;quot; collection to &amp;quot;bar&amp;quot;
await db.RenameCollectionAsync(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;indexes&#34;&gt;Indexes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; contains an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/P_MongoDB_Driver_IMongoCollection_1_Indexes.htm
&#34;&gt;&lt;code&gt;Indexes&lt;/code&gt;&lt;/a&gt; property which gives access to all the index-related operations for a collection.&lt;/p&gt;

&lt;p&gt;A number of the methods take an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IndexKeysDefinition_1.htm
&#34;&gt;&lt;code&gt;IndexKeysDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;. See the documentation on the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/definitions/#index-keys &#34;&gt;index keys builder&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;creating-an-index&#34;&gt;Creating an index&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_CreateOneAsync.htm
&#34;&gt;&lt;code&gt;CreateOneAsync&lt;/code&gt;&lt;/a&gt; to create a single index. For instance, to create an ascending index on the &amp;ldquo;x&amp;rdquo; and &amp;ldquo;y&amp;rdquo; fields,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await collection.Indexes.CreateOneAsync(&amp;quot;{x: 1, y: 1}&amp;quot;);

// or

await collection.Indexes.CreateOneAsync(new BsonDocument(&amp;quot;x&amp;quot;, 1).Add(&amp;quot;y&amp;quot;, 1));

// or

await collection.Indexes.CreateOneAsync(Builders&amp;lt;BsonDocument&amp;gt;.IndexKeys.Ascending(&amp;quot;x&amp;quot;).Ascending(&amp;quot;y&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, there are a number of options available when creating index. These are present on the optional &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_CreateIndexOptions.htm
&#34;&gt;&lt;code&gt;CreateIndexOptions&lt;/code&gt;&lt;/a&gt; parameter. For instance, to create a unique ascending index on &amp;ldquo;x&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await collection.Indexes.CreateOneAsync(&amp;quot;{x: 1}&amp;quot;, new CreateIndexOptions { Unique = true });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-an-index&#34;&gt;Dropping an index&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_DropOneAsync.htm
&#34;&gt;&lt;code&gt;DropOneAsync&lt;/code&gt;&lt;/a&gt; to drop a single index or the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_DropAllAsync.htm
&#34;&gt;&lt;code&gt;DropAllAsync&lt;/code&gt;&lt;/a&gt; to drop all indexes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// drop the index named &amp;quot;x_1&amp;quot;;
await collection.Indexes.DropOneAsync(&amp;quot;x_1&amp;quot;);

// drop all indexes
await collection.Indexes.DropAllAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listing-indexes&#34;&gt;Listing indexes&lt;/h3&gt;

&lt;p&gt;To see all the indexes in a collection, use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_ListAsync.htm
&#34;&gt;&lt;code&gt;ListAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using(var cursor = await collection.Indexes.ListAsync())
{
    var list = await cursor.ToListAsync();
    // do something with the list...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Issues &amp; Help</title>
      <link>/mongo-csharp-driver/2.0/issues_help/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/issues_help/</guid>
      <description>

&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/mongodb-user&#34;&gt;Discussion Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/mongodb&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bug-reports&#34;&gt;Bug Reports&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP&#34;&gt;JIRA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve identified a security vulnerability in a driver or any other MongoDB project, please report it according to the &lt;a href=&#34;https://www.mongodb.com/docs/manual/tutorial/create-a-vulnerability-report&#34;&gt;instructions here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exporting JSON</title>
      <link>/mongo-csharp-driver/2.0/examples/exporting_json/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/examples/exporting_json/</guid>
      <description>

&lt;h2 id=&#34;exporting-json&#34;&gt;Exporting JSON&lt;/h2&gt;

&lt;p&gt;The .NET BSON library supports writing JSON documents with the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonWriter.htm
&#34;&gt;&lt;code&gt;JsonWriter&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;The program below will export all documents from a collection to a file with one document per line.&lt;/p&gt;

&lt;p&gt;Given the collection&amp;rsquo;s contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; db.mydata.find()
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306a2dfd32ffd580e323&amp;quot;), &amp;quot;x&amp;quot; : 1.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306c2dfd32ffd580e324&amp;quot;), &amp;quot;x&amp;quot; : 2.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306e2dfd32ffd580e325&amp;quot;), &amp;quot;x&amp;quot; : 3.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;551330712dfd32ffd580e326&amp;quot;), &amp;quot;x&amp;quot; : 4.0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using MongoDB.Bson;
using MongoDB.Bson.IO;
using MongoDB.Bson.Serialization;
using MongoDB.Driver;

// ...

string outputFileName; // initialize to the output file
IMongoCollection&amp;lt;BsonDocument&amp;gt; collection; // initialize to the collection to read from

using (var streamWriter = new StreamWriter(outputFileName))
{
    await collection.Find(new BsonDocument())
        .ForEachAsync(async (document) =&amp;gt;
        {
            using (var stringWriter = new StringWriter())
            using (var jsonWriter = new JsonWriter(stringWriter))
            {
                var context = BsonSerializationContext.CreateRoot(jsonWriter);
                collection.DocumentSerializer.Serialize(context, document);
                var line = stringWriter.ToString();
                await streamWriter.WriteLineAsync(line);
            }
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output file should look this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306a2dfd32ffd580e323&amp;quot;), &amp;quot;x&amp;quot; : 1.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306c2dfd32ffd580e324&amp;quot;), &amp;quot;x&amp;quot; : 2.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306e2dfd32ffd580e325&amp;quot;), &amp;quot;x&amp;quot; : 3.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;551330712dfd32ffd580e326&amp;quot;), &amp;quot;x&amp;quot; : 4.0 }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>/mongo-csharp-driver/2.0/examples/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/examples/</guid>
      <description>

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;A number of examples have been compiled to show a more thorough usage of certain features and how they interact.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/examples/importing_json/&#34;&gt;Importing JSON&lt;/a&gt;: How to read JSON from a file and insert it into a collection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/examples/exporting_json/&#34;&gt;Exporting JSON&lt;/a&gt;: How to read data from a collection and export it to a JSON file.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/examples/mixing_static_and_dynamic/&#34;&gt;Mixing Static and Dynamic Data&lt;/a&gt;: How to have both static and dynamic data inside your classes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/examples/tailable_cursor/&#34;&gt;Using Tailable Cursors&lt;/a&gt;: How to use a tailable cursor.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/examples/user_management/&#34;&gt;Managing Users&lt;/a&gt;: How to manage users.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Importing JSON</title>
      <link>/mongo-csharp-driver/2.0/examples/importing_json/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/examples/importing_json/</guid>
      <description>

&lt;h2 id=&#34;importing-json&#34;&gt;Importing JSON&lt;/h2&gt;

&lt;p&gt;The .NET BSON library supports reading JSON documents with the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonReader.htm
&#34;&gt;&lt;code&gt;JsonReader&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;The program below will import all documents from a file with one document per line into the collection.&lt;/p&gt;

&lt;p&gt;Given the input file&amp;rsquo;s contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306a2dfd32ffd580e323&amp;quot;), &amp;quot;x&amp;quot; : 1.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306c2dfd32ffd580e324&amp;quot;), &amp;quot;x&amp;quot; : 2.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306e2dfd32ffd580e325&amp;quot;), &amp;quot;x&amp;quot; : 3.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;551330712dfd32ffd580e326&amp;quot;), &amp;quot;x&amp;quot; : 4.0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using MongoDB.Bson;
using MongoDB.Bson.IO;
using MongoDB.Bson.Serialization;
using MongoDB.Driver;

// ...

string inputFileName; // initialize to the input file
IMongoCollection&amp;lt;BsonDocument&amp;gt; collection; // initialize to the collection to write to.

using (var streamReader = new StreamReader(inputFileName))
{
    string line;
    while ((line = await streamReader.ReadLineAsync()) != null)
    {
        using (var jsonReader = new JsonReader(line))
        {
            var context = BsonDeserializationContext.CreateRoot(jsonReader);
            var document = collection.DocumentSerializer.Deserialize(context);
            await collection.InsertOneAsync(document);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The collection&amp;rsquo;s contents should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; db.mydata.find()
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306a2dfd32ffd580e323&amp;quot;), &amp;quot;x&amp;quot; : 1.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306c2dfd32ffd580e324&amp;quot;), &amp;quot;x&amp;quot; : 2.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306e2dfd32ffd580e325&amp;quot;), &amp;quot;x&amp;quot; : 3.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;551330712dfd32ffd580e326&amp;quot;), &amp;quot;x&amp;quot; : 4.0 }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-csharp-driver/2.0/getting_started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/</guid>
      <description>

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To help you get started quickly on the new driver, follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/getting_started/installation/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/getting_started/quick_tour/&#34;&gt;Quick Tour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/getting_started/admin_quick_tour/&#34;&gt;Admin Quick Tour&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/mongo-csharp-driver/2.0/getting_started/installation/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/installation/</guid>
      <description>

&lt;h2 id=&#34;system-requirements&#34;&gt;System Requirements&lt;/h2&gt;

&lt;p&gt;.NET 4.5 or later is required to utilize the libraries. It has also been tested with Mono 3.10 on OS X.&lt;/p&gt;

&lt;h3 id=&#34;core-clr&#34;&gt;Core CLR&lt;/h3&gt;

&lt;p&gt;As the Core CLR hasn&amp;rsquo;t shipped yet, we don&amp;rsquo;t yet have support for it. We run compatibility reports using the &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/1177943e-cfb7-4822-a8a6-e56c7905292b&#34;&gt;.NET Portability Analyzer&lt;/a&gt; to mitigate the need to make public API changes when we are ready to release compatible assemblies.&lt;/p&gt;

&lt;h2 id=&#34;nuget-installation&#34;&gt;Nuget Installation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/&#34;&gt;Nuget&lt;/a&gt; is the simplest way to get the driver. There are 4 packages available on nuget.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongodb.driver&#34;&gt;MongoDB.Driver&lt;/a&gt;: The new driver. It is mostly free of any legacy code and should be used for all new projects. More documentation can be found in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/&#34;&gt;reference guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongodb.driver.core&#34;&gt;MongoDB.Driver.Core&lt;/a&gt;: The core of the driver and a dependency of MongoDB.Driver. You will probably not use this package directly. More documentation can be found in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver_core/&#34;&gt;reference guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongodb.bson&#34;&gt;MongoDB.Bson&lt;/a&gt;: The BSON layer. It is a dependency of MongoDB.Driver.Core. It may be used by itself. More documentation can be found in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/&#34;&gt;reference guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongocsharpdriver&#34;&gt;mongocsharpdriver&lt;/a&gt;: The compatibility layer for those upgrading from our 1.x series. This should not be used for new projects. More information can be found in the &lt;a href=&#34;https://mongodb.github.io/mongo-csharp-driver/1.x&#34;&gt;1.x documentation&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;binary-installation&#34;&gt;Binary Installation&lt;/h2&gt;

&lt;p&gt;Alternatively, if you&amp;rsquo;d like to pull down binaries, you can do that from the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/releases&#34;&gt;releases section&lt;/a&gt; on our &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver&#34;&gt;github repository&lt;/a&gt;, which contains zip files for each release.&lt;/p&gt;

&lt;p&gt;The assembly names mostly correlate strongly with the package names above. For new applications, you&amp;rsquo;ll add references to &lt;code&gt;MongoDB.Driver.dll&lt;/code&gt;, &lt;code&gt;MongoDB.Driver.Core.dll&lt;/code&gt;, and &lt;code&gt;MongoDB.Bson.dll&lt;/code&gt;. For those working with legacy applications, you&amp;rsquo;ll also want to add a reference to &lt;code&gt;MongoDB.Driver.Legacy.dll&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>index</title>
      <link>/mongo-csharp-driver/2.0/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/</guid>
      <description>

&lt;h2 id=&#34;welcome-to-the-net-mongodb-driver-documentation&#34;&gt;Welcome to the .NET MongoDB Driver Documentation&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/getting_started/&#34;&gt;Getting Started&lt;/a&gt; guide contains information about system requirements, installation, and a simple tutorial to get up and running quickly.&lt;/p&gt;

&lt;h2 id=&#34;what-s-new-in-2-0&#34;&gt;What&amp;rsquo;s new in 2.0&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/what_is_new/&#34;&gt;What&amp;rsquo;s New&lt;/a&gt; contains the major new features of the driver, the most important of which is full async support.&lt;/p&gt;

&lt;h2 id=&#34;upgrading&#34;&gt;Upgrading&lt;/h2&gt;

&lt;p&gt;If you are coming from the 1.x series of the driver, consult the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/upgrading/&#34;&gt;upgrading&lt;/a&gt; documentation on major changes.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;If you are looking for more detailed documentation, see the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/&#34;&gt;Reference&lt;/a&gt; guide.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BSON/JSON</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/bson/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/bson/</guid>
      <description>

&lt;h2 id=&#34;reading&#34;&gt;Reading&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_IBsonReader.htm
&#34;&gt;&lt;code&gt;IBsonReader&lt;/code&gt;&lt;/a&gt; interface contains all the methods necessary to read a &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt; document or a &lt;a href=&#34;http://json.org&#34;&gt;JSON&lt;/a&gt; document. There is an implementation for each format.&lt;/p&gt;

&lt;h3 id=&#34;bson&#34;&gt;BSON&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_BsonBinaryReader.htm
&#34;&gt;&lt;code&gt;BsonBinaryReader&lt;/code&gt;&lt;/a&gt; is for reading binary BSON. For example, to read a BSON file containing the document &lt;code&gt;{ a: 1 }&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string inputFileName; // initialize to a file containing BSON

using (var stream = File.OpenRead(inputFileName))
using (var reader = new BsonBinaryReader(stream))
{
    reader.ReadStartDocument();
    string fieldName = reader.ReadName();
    int value = reader.ReadInt32();
    reader.ReadEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;json&#34;&gt;JSON&lt;/h3&gt;

&lt;p&gt;In the same way, we can read a JSON string using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonReader.htm
&#34;&gt;&lt;code&gt;JsonReader&lt;/code&gt;&lt;/a&gt;. For example, to read the document &lt;code&gt;{ a: 1 }&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var jsonString = &amp;quot;{ a: 1 }&amp;quot;;
using (var reader = new JsonReader(jsonString))
{
    reader.ReadStartDocument();
    string fieldName = reader.ReadName();
    int value = reader.ReadInt32();
    reader.ReadEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonReader.htm
&#34;&gt;&lt;code&gt;JsonReader&lt;/code&gt;&lt;/a&gt; supports reading strict JSON as well as both flavors of &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/
&#34;&gt;MongoDB Extended JSON&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;writing&#34;&gt;Writing&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_IBsonWriter.htm
&#34;&gt;&lt;code&gt;IBsonWriter&lt;/code&gt;&lt;/a&gt; interface contains all the methods necessary to write a &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt; document or a &lt;a href=&#34;http://json.org&#34;&gt;JSON&lt;/a&gt; document. There is an implementation for each format.&lt;/p&gt;

&lt;h3 id=&#34;bson-1&#34;&gt;BSON&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_BsonBinaryWriter.htm
&#34;&gt;&lt;code&gt;BsonBinaryWriter&lt;/code&gt;&lt;/a&gt; is for writing binary BSON. For example, to write the document &lt;code&gt;{ a: 1 }&lt;/code&gt; to a BSON file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string outputFileName; // initialize to the file to write to.

using (var stream = File.OpenWrite(outputFileName))
using (var writer = new BsonBinaryWriter(stream))
{
    writer.WriteStartDocument();
    writer.WriteName(&amp;quot;a&amp;quot;);
    writer.WriteInt32(1);
    writer.WriteEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;json-1&#34;&gt;JSON&lt;/h3&gt;

&lt;p&gt;In the same way, we can write a JSON string using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonWriter.htm
&#34;&gt;&lt;code&gt;JsonWriter&lt;/code&gt;&lt;/a&gt;. For example, to write the document &lt;code&gt;{ a: 1 }&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string outputFileName; // initialize to the file to write to.

using (var output = new StreamWriter(outputFileName))
using (var writer = new JsonWriter(output))
{
    writer.WriteStartDocument();
    writer.WriteName(&amp;quot;a&amp;quot;);
    writer.WriteInt32(1);
    writer.WriteEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;settings&#34;&gt;Settings&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonWriter.htm
&#34;&gt;&lt;code&gt;JsonWriter&lt;/code&gt;&lt;/a&gt; supports writing strict JSON as well as both flavors of &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/
&#34;&gt;MongoDB Extended JSON&lt;/a&gt;. This, and other things, can be customized with the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonWriterSettings.htm
&#34;&gt;&lt;code&gt;JsonWriterSettings&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;For instance, to write in a format for the &lt;a href=&#34;https://www.mongodb.com/docs/manual/administration/scripting/&#34;&gt;MongoDB Shell&lt;/a&gt;, you can set the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/P_MongoDB_Bson_IO_JsonWriterSettings_OutputMode.htm
&#34;&gt;&lt;code&gt;OutputMode&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;Shell&lt;/code&gt; and also set the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/P_MongoDB_Bson_IO_JsonWriterSettings_ShellVersion.htm
&#34;&gt;&lt;code&gt;ShellVersion&lt;/code&gt;&lt;/a&gt; to the desired shell version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var settings = new JsonWriterSettings
{
    OutputMode = JsonOutputMode.Shell,
    ShellVersion = new Version(3.0) // target the syntax of MongoDB 3.0
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BsonDocument</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/bson_document/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/bson_document/</guid>
      <description>

&lt;h2 id=&#34;bsondocument&#34;&gt;BsonDocument&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; is the default type used for documents. It handles dynamic documents of any complexity. For instance, the document &lt;code&gt;{ a: 1, b: [{ c: 1 }] }&lt;/code&gt; can be built as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var doc = new BsonDocument
{
    { &amp;quot;a&amp;quot;, 1 },
    { &amp;quot;b&amp;quot;, new BsonArray
           {
                new BsonDocument(&amp;quot;c&amp;quot;, 1)
           }}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, there is a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_BsonDocument_Parse.htm
&#34;&gt;&lt;code&gt;Parse&lt;/code&gt;&lt;/a&gt; method to make reading a JSON string simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var doc = BsonDocument.Parse(&amp;quot;{ a: 1, b: [{ c: 1 }] }&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BSON</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/</guid>
      <description>

&lt;h2 id=&#34;bson-reference&#34;&gt;BSON Reference&lt;/h2&gt;

&lt;p&gt;The MongoDB.Bson library handles &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt; and &lt;a href=&#34;http://json.org&#34;&gt;JSON&lt;/a&gt; as well as serialization to and from .NET types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/bson/&#34;&gt;Reading and Writing BSON/JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/bson_document/&#34;&gt;BsonDocument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/serialization/&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/&#34;&gt;Mapping Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Conventions</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/mapping/conventions/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/mapping/conventions/</guid>
      <description>

&lt;h2 id=&#34;conventions&#34;&gt;Conventions&lt;/h2&gt;

&lt;p&gt;When &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#automap&#34;&gt;automapping&lt;/a&gt; a class, there are a lot of decisions that need to be made. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which members of the class should be serialized&lt;/li&gt;
&lt;li&gt;Which member of the class is the “Id”&lt;/li&gt;
&lt;li&gt;What element name should be used in the BSON document&lt;/li&gt;
&lt;li&gt;If the class is being used polymorphically, what discriminator values are used&lt;/li&gt;
&lt;li&gt;What should happen if a BSON document has elements we don’t recognize&lt;/li&gt;
&lt;li&gt;Does the member have a default value&lt;/li&gt;
&lt;li&gt;Should the default value be serialized or ignored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answers to these questions are represented by a set of “conventions”. For each convention, there is a default convention that is the most likely one you will be using, but you can override individual conventions as necessary.&lt;/p&gt;

&lt;p&gt;If you want to use your own conventions that differ from the defaults, simply create an instance of &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_ConventionPack.htm
&#34;&gt;&lt;code&gt;ConventionPack&lt;/code&gt;&lt;/a&gt;, add in the conventions you want to use, and then register that pack. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var pack = new ConventionPack();
pack.Add(new CamelCaseElementNameConvention());

ConventionRegistry.Register(
   &amp;quot;My Custom Conventions&amp;quot;,
   pack,
   t =&amp;gt; t.FullName.StartsWith(&amp;quot;MyNamespace.&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third parameter is a filter function that defines when this convention pack should be used. Above, we are saying that any classes whose full names begin with &amp;ldquo;MyNamespace.&amp;rdquo; should use these conventions.&lt;/p&gt;

&lt;h2 id=&#34;custom-conventions&#34;&gt;Custom Conventions&lt;/h2&gt;

&lt;p&gt;In addition to pre-packaged conventions, it is possible to write your own. There are 4 classes of conventions which can be created and registered. These 4 classes of conventions correspond with the 4 stages in which they will be run.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Class Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IClassMapConvention.htm
&#34;&gt;&lt;code&gt;IClassMapConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against the class map.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Member Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IMemberMapConvention.htm
&#34;&gt;&lt;code&gt;IMemberMapConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against each member map discovered during the Class stage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Creator Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_ICreatorMapConvention.htm
&#34;&gt;&lt;code&gt;ICreatorMapConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against each CreatorMap discovered during the Class stage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Post Processing Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IPostProcessingConvention.htm
&#34;&gt;&lt;code&gt;IPostProcessingConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against the class map.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conventions get run in the order they were registered in each stage. The default set of conventions is registered first. This allows any user registered conventions to override the values applied by the default conventions. Hence, it is possible that certain values may get applied and overwritten. It is up to the user to ensure that the order is correct.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If a custom implementation of an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IPostProcessingConvention.htm&#34;&gt;&lt;code&gt;IPostProcessingConvention&lt;/code&gt;&lt;/a&gt; is registered before a customer implementation of an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IClassMapConvention.htm&#34;&gt;&lt;code&gt;IClassMapConvention&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IClassMapConvention.htm&#34;&gt;&lt;code&gt;IClassMapConvention&lt;/code&gt;&lt;/a&gt; will be run first because the Class Stage is before the Post Processing Stage.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;As an example, we will write a custom convention to name all the elements the corresponding lower-case version of the member name. We can implement this convention as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class LowerCaseElementNameConvention : IMemberMapConvention 
{
    public void Apply(BsonMemberMap memberMap) 
    {
        memberMap.SetElementName(memberMap.MemberName.ToLower());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you are doing one-off conventions like this, it might be easier to create them with a simple lambda expresion instead. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var pack = new ConventionPack();
pack.AddMemberMapConvention(
    &amp;quot;LowerCaseElementName&amp;quot;,
    m =&amp;gt; m.SetElementName(m.MemberName.ToLower()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the best examples of writing custom conventions, it is good to consult the source for the pre-packaged conventions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>