<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB .NET Driver</title>
    <link>/mongo-csharp-driver/2.1/</link>
    <description>Recent content on MongoDB .NET Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/mongo-csharp-driver/2.1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deleting and Renaming Files</title>
      <link>/mongo-csharp-driver/2.1/reference/gridfs/deletingandrenamingfiles/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/gridfs/deletingandrenamingfiles/</guid>
      <description>

&lt;h2 id=&#34;deleting-and-renaming-files&#34;&gt;Deleting and Renaming Files&lt;/h2&gt;

&lt;p&gt;These methods allow you to delete or rename GridFS files.&lt;/p&gt;

&lt;h3 id=&#34;deleting-a-single-file&#34;&gt;Deleting a single file&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_DeleteAsync_1.htm
&#34;&gt;&lt;code&gt;DeleteAsync&lt;/code&gt;&lt;/a&gt; method is used to delete a single file identified by its Id.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
ObjectId id;

await bucket.DeleteAsync(id);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-an-entire-gridfs-bucket&#34;&gt;Dropping an entire GridFS bucket&lt;/h3&gt;

&lt;p&gt;If you want to drop an entire GridFS bucket at once use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_DropAsync.htm
&#34;&gt;&lt;code&gt;DropAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;

await bucket.DropAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
The &amp;ldquo;fs.files&amp;rdquo; collection will be dropped first, followed by the &amp;ldquo;fs.chunks&amp;rdquo; collection. This is the fastest way to delete all files stored in a GridFS bucket at once.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;renaming-a-single-file&#34;&gt;Renaming a single file&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_RenameAsync_1.htm
&#34;&gt;&lt;code&gt;RenameAsync&lt;/code&gt;&lt;/a&gt; method is used to rename a single file identified by its Id.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
ObjectId id;
string newFilename;

await bucket.RenameAsync(id, newFilename);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;renaming-all-revisions-of-a-file&#34;&gt;Renaming all revisions of a file&lt;/h3&gt;

&lt;p&gt;If you want to rename all revisions of a file you first use &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_FindAsync.htm
&#34;&gt;&lt;code&gt;FindAsync&lt;/code&gt;&lt;/a&gt; to find their ids and then call &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_RenameAsync_1.htm
&#34;&gt;&lt;code&gt;RenameAsync&lt;/code&gt;&lt;/a&gt; in a loop to rename them one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
ObjectId id;
string oldFilename;
string newFilename;

var filter = Builders&amp;lt;GridFSFileInfo&amp;gt;.Filter.EQ(x =&amp;gt; x.Filename, oldFilename);
var filesCursor = await bucket.FindAsync(filter);
var files = await filesCursor.ToListAsync();

foreach (var file in files)
{
    await bucket.RenameAsync(file.Id, newFilename);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-csharp-driver/2.1/reference/gridfs/gettingstarted/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/gridfs/gettingstarted/</guid>
      <description>

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;GridFS files are stored in the database using two collections, normally called &amp;ldquo;fs.files&amp;rdquo; and &amp;ldquo;fs.chunks&amp;rdquo;. Each file uploaded to GridFS has one document in the &amp;ldquo;fs.files&amp;rdquo; collection containing information about the file and as many chunks as necessary in the &amp;ldquo;fs.chunks&amp;rdquo; collection to store the contents of the file.&lt;/p&gt;

&lt;p&gt;A GridFS &amp;ldquo;bucket&amp;rdquo; is the combination of an &amp;ldquo;fs.files&amp;rdquo; and &amp;ldquo;fs.chunks&amp;rdquo; collection which together represent a bucket where GridFS files can be stored.&lt;/p&gt;

&lt;h3 id=&#34;gridfsbucket&#34;&gt;GridFSBucket&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSBucket.htm
&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt; object is the root object representing a GridFS bucket.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition warning&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;warning&lt;/h5&gt;
&lt;p&gt;You should always use a &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSBucket.htm&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt; object to interact with GridFS instead of directly referencing the underlying collections.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You create a &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSBucket.htm
&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt; instance by calling its constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IMongoDatabase database;

var bucket = new GridFSBucket(database);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also provide options when instantiating the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSBucket.htm
&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IMongoDatabase database;

var bucket = new GridFSBucket(database, new GridFSOptions
{
    BucketName = &amp;quot;videos&amp;quot;,
    ChunkSizeBytes = 1048576, // 1MB
    WriteConcern = WriteConcern.Majority,
    ReadPreference = ReadPeference.Secondary
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSBucketOptions_BucketName.htm
&#34;&gt;&lt;code&gt;BucketName&lt;/code&gt;&lt;/a&gt; value is the root part of the files and chunks collection names, so in this example the two collections would be named &amp;ldquo;videos.files&amp;rdquo; and &amp;ldquo;videos.chunks&amp;rdquo; instead of &amp;ldquo;fs.files&amp;rdquo; and &amp;ldquo;fs.chunks&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSBucketOptions_ChunkSizeBytes.htm
&#34;&gt;&lt;code&gt;ChunkSizeBytes&lt;/code&gt;&lt;/a&gt; value defines the size of each chunk, and in this example we are overriding the default value of 261120 (255MB).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSBucketOptions_WriteConcern.htm
&#34;&gt;&lt;code&gt;WriteConcern&lt;/code&gt;&lt;/a&gt; is used when uploading files to GridFS, and the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSBucketOptions_ReadPreference.htm
&#34;&gt;&lt;code&gt;ReadPreference&lt;/code&gt;&lt;/a&gt; is used when downloading files from GridFS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Downloading Files</title>
      <link>/mongo-csharp-driver/2.1/reference/gridfs/downloadingfiles/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/gridfs/downloadingfiles/</guid>
      <description>

&lt;h2 id=&#34;downloading-files&#34;&gt;Downloading Files&lt;/h2&gt;

&lt;p&gt;There are several ways to download a file from GridFS. The two main approaches are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The driver downloads a file as a byte array or by writing the contents to a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; provided by the application&lt;/li&gt;
&lt;li&gt;The driver supplies a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; object that the application can read the contents from&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;downloading-as-a-byte-array&#34;&gt;Downloading as a byte array&lt;/h3&gt;

&lt;p&gt;This is the easiest way to download a file from GridFS, assuming that the file is small enough for the entire contents to be held in memory at once.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
ObjectId id;

var bytes = await bucket.DownloadAsBytesAsync(id);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;downloading-to-a-stream&#34;&gt;Downloading to a Stream&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t want to hold the entire contents of the downloaded file in memory at once, you can have the driver write the contents of the file to a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; provided by the application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
ObjectId id;
Stream destination;

await bucket.DownloadToStreamAsync(id, destination);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The driver will download the contents of the GridFS file and write them to the destination &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;. The driver begins writing the contents at the current position of the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
The driver does &lt;strong&gt;not&lt;/strong&gt; close the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; when it is done. The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; is owned by the application and it is up to the application to close the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; when it is ready to do so.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;downloading-from-a-stream&#34;&gt;Downloading from a Stream&lt;/h3&gt;

&lt;p&gt;In some cases the application might prefer to read the contents of the GridFS file from a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
ObjectId id;

using (var stream = await bucket.OpenDownloadStreamAsync(id))
{
    // read from stream until end of file is reached
    await stream.CloseAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; object returned by &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_OpenDownloadStreamAsync_1..htm
&#34;&gt;&lt;code&gt;OpenDownloadStreamAsync&lt;/code&gt;&lt;/a&gt; is actually a &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSDownloadStream.htm
&#34;&gt;&lt;code&gt;GridFSDownloadStream&lt;/code&gt;&lt;/a&gt; (a subclass of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;), which has the following additional members in addition to those found in &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public abstract class GridFSDownloadStream : Stream
{
    public abstract GridFSFileInfo FileInfo { get; }
    public abstract Task CloseAsync(CancellationToken cancellationToken = default(CancellationToken));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSDownloadStream_FileInfo.htm
&#34;&gt;&lt;code&gt;FileInfo&lt;/code&gt;&lt;/a&gt; property contains information about the GridFS file being dowloaded. See the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_FindAsync.htm
&#34;&gt;&lt;code&gt;FindAsync&lt;/code&gt;&lt;/a&gt; method for details about the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSFileInfo.htm
&#34;&gt;&lt;code&gt;GridFSFileInfo&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Calling &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSDownloadStream_CloseAsync..htm&#34;&gt;&lt;code&gt;CloseAsync&lt;/code&gt;&lt;/a&gt; is optional, but recommended. Since &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; is &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.idisposable.aspx&#34;&gt;&lt;code&gt;IDisposable&lt;/code&gt;&lt;/a&gt; and it is used inside a using statement, it would be closed automatically when &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.idisposable.dispose.aspx&#34;&gt;&lt;code&gt;Dispose&lt;/code&gt;&lt;/a&gt; is called. However, in async programming we want to avoid blocking and calling &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSDownloadStream_CloseAsync..htm&#34;&gt;&lt;code&gt;CloseAsync&lt;/code&gt;&lt;/a&gt; first allows the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; to be closed with an async call. If you call &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSDownloadStream_CloseAsync..htm&#34;&gt;&lt;code&gt;CloseAsync&lt;/code&gt;&lt;/a&gt; first then &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.idisposable.dispose.aspx&#34;&gt;&lt;code&gt;Dispose&lt;/code&gt;&lt;/a&gt; will no longer block.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;By default the driver assumes that you want to read the entire contents of the file from beginning to end, and returns a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; implementation that does not support seeking, which allows for a more efficient implementation.&lt;/p&gt;

&lt;p&gt;If you do want to use &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.seek.aspx&#34;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt; with the returned &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;, you can use the options parameter to indicate that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
ObjectId id;

var options = new GridFSDownloadOptions
{
    Seekable = true
};

using (var stream = await bucket.OpenDownloadStreamAsync(id, options))
{
    // this time the Stream returned supports seeking
    await stream.CloseAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;downloading-by-filename&#34;&gt;Downloading by filename&lt;/h3&gt;

&lt;p&gt;All the previous examples used an Id to specify which GridFS file to download. You can also use a filename to specify which GridFS file to download, but in this case you might need to indicate which &amp;ldquo;revision&amp;rdquo; of the file you want to download if there are multiple GridFS files with the same filename.&lt;/p&gt;

&lt;p&gt;Revisions are identified using an integer, as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0 = the original version uploaded&lt;/li&gt;
&lt;li&gt;1 = the first revision of the file&lt;/li&gt;
&lt;li&gt;2 = the second revision of the file&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;-2 the second newest revision of the file&lt;/li&gt;
&lt;li&gt;-1 the newest revision of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default value for the revision is -1 (i.e. the newest revision).&lt;/p&gt;

&lt;p&gt;The following examples all download the newest revision:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
string filename;

var bytes = await bucket.DownloadAsBytesByNameAsync(filename);

// or

Stream destination;
await bucket.DownloadToStreamByNameAsync(filename, destination);

// or

using (var stream = await bucket.OpenDownloadStreamByNameAsync(filename))
{
    // read from stream until end of file is reached
    await stream.CloseAsync(); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to download a different revision, you specify the desired revision using the options parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
string filename;

var options = new GridFSDownloadByNameOptions
{
    Revision = 0
};

var bytes = await bucket.DownloadAsBytesByNameAsync(filename, options);

// or

Stream destination;
await bucket.DownloadToStreamByNameAsync(filename, destination, options);

// or

using (var stream = await bucket.OpenDownloadStreamByNameAsync(filename, options))
{
    // read from stream until end of file is reached
    await stream.CloseAsync(); 
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Finding Files</title>
      <link>/mongo-csharp-driver/2.1/reference/gridfs/findingfiles/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/gridfs/findingfiles/</guid>
      <description>

&lt;h2 id=&#34;finding-files&#34;&gt;Finding Files&lt;/h2&gt;

&lt;p&gt;Each file stored in GridFS has a unique Id assigned to it, and that is the primary way of accessing the stored files.&lt;/p&gt;

&lt;h3 id=&#34;findasync-method&#34;&gt;FindAsync method&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t know the Id, you can use &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_FindAsync.htm
&#34;&gt;&lt;code&gt;FindAsync&lt;/code&gt;&lt;/a&gt; to find matching files using a filter. The filter must be of type &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_FilterDefinition_1.htm
&#34;&gt;&lt;code&gt;FilterDefinition&amp;lt;GridFSFileInfo&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, to find the newest revision of the file named &amp;ldquo;securityvideo&amp;rdquo; uploaded in January 2015 we could use &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_FindAsync.htm
&#34;&gt;&lt;code&gt;FindAsync&lt;/code&gt;&lt;/a&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
var filter = Builders&amp;lt;GridFSFileInfo&amp;gt;.Filter.And( 
    Builders&amp;lt;GridFSFileInfo&amp;gt;.Filter.EQ(x =&amp;gt; x.Filename, &amp;quot;securityvideo&amp;quot;),
    Builders&amp;lt;GridFSFileInfo&amp;gt;.Filter.GTE(x =&amp;gt; x.UploadDateTime, new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Utc)),
    Builders&amp;lt;GridFSFileInfo&amp;gt;.Filter.LT(x =&amp;gt; x.UploadDateTime, new DateTime(2015, 2, 1, 0, 0, 0, DateTimeKind.Utc)));
var sort = Builders&amp;lt;GridFSFileInfo&amp;gt;.Sort.Descending(x =&amp;gt; x.UploadDateTime);
var options = new GridFSFindOptions
{
    Limit = 1,
    Sort = sort
};

using (var cursor = await bucket.FindAsync(filter, options))
{
   var fileInfo = (await cursor.ToListAsync()).FirstOrDefault();
   // fileInfo either has the matching file information or is null
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gridfsfileinfo-class&#34;&gt;GridFSFileInfo class&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSFileInfo.htm
&#34;&gt;&lt;code&gt;GridFSFileInfo&lt;/code&gt;&lt;/a&gt; is a strongly typed class that represents the information about a GridFS file stored in the &amp;ldquo;fs.files&amp;rdquo; collection.&lt;/p&gt;

&lt;p&gt;This class is a strongly typed wrapper around a backing &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;. It makes it easier to extract the information available in a files collection documents.&lt;/p&gt;

&lt;p&gt;In older drivers it was possible to store arbitrary information at the root level of a files collection document. If you need to access that information you can use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSFileInfo_BackingDocument.htm
&#34;&gt;&lt;code&gt;BackingDocument&lt;/code&gt;&lt;/a&gt; property to get access to the complete backing document. When uploading new GridFS files you should store any additional information you want to associate with the uploaded file inside the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSFileInfo_Metadata.htm
&#34;&gt;&lt;code&gt;Metadata&lt;/code&gt;&lt;/a&gt; document.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uploading Files</title>
      <link>/mongo-csharp-driver/2.1/reference/gridfs/uploadingfiles/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/gridfs/uploadingfiles/</guid>
      <description>

&lt;h2 id=&#34;uploading-files&#34;&gt;Uploading Files&lt;/h2&gt;

&lt;p&gt;There are several ways to upload a file to GridFS. The two main approaches are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The driver uploads a file from a source provided by the application&lt;/li&gt;
&lt;li&gt;The driver supplies a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; object that the application can write the contents to&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Files uploaded to GridFS are identified either by Id or by Filename. Each uploaded file is assigned a unique Id of type &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Bson_ObjectId.htm
&#34;&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/a&gt;. If multiple files are uploaded to GridFS with the same Filename, they are considered to be &amp;ldquo;revisions&amp;rdquo; of the same file, and the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSFileInfo_UploadDateTime.htm
&#34;&gt;&lt;code&gt;UploadDateTime&lt;/code&gt;&lt;/a&gt; is used to decide whether one revision is newer than another.&lt;/p&gt;

&lt;h3 id=&#34;uploading-from-a-byte-array&#34;&gt;Uploading from a byte array&lt;/h3&gt;

&lt;p&gt;This is the easiest way to upload a file to GridFS, assuming that you have, or can easily get, the contents of the file as a byte array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
bytes[] source;

var id = await bucket.UploadFromBytesAsync(&amp;quot;filename&amp;quot;, source);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The id returned is the unique &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Bson_ObjectId.htm
&#34;&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/a&gt; assigned by the driver to represent this revision of &amp;ldquo;filename&amp;rdquo; in the GridFS bucket.&lt;/p&gt;

&lt;p&gt;When using &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_UploadFromBytesAsync.htm
&#34;&gt;&lt;code&gt;UploadFromBytesAsync&lt;/code&gt;&lt;/a&gt; you can also provide additional options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
bytes[] source;

var id = await bucket.UploadFromBytesAsync(&amp;quot;filename&amp;quot;, source, new GridFSUploadOptions
{
    ChunkSizeBytes = 64512, // 63KB
    Metadata = new BsonDocument
    {
        { &amp;quot;resolution&amp;quot;, &amp;quot;1080P&amp;quot; },
        { &amp;quot;copyrighted&amp;quot;, true }
    }   
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we are overriding the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSUploadOptions_ChunkSizeBytes.htm
&#34;&gt;&lt;code&gt;ChunkSizeBytes&lt;/code&gt;&lt;/a&gt; defined in the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSBucket.htm
&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt; and providing additional metadata to be stored with the GridFS file.&lt;/p&gt;

&lt;h3 id=&#34;uploading-from-a-stream&#34;&gt;Uploading from a Stream&lt;/h3&gt;

&lt;p&gt;If the contents of the file you want to upload are more easily accessible using a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; than a byte array (or are too large to load entirely into memory at once), you can use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_UploadFromStreamAsync.htm
&#34;&gt;&lt;code&gt;UploadFromStreamAsync&lt;/code&gt;&lt;/a&gt; method instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;
Stream source;

var id = await bucket.UploadFromStreamAsync(&amp;quot;filename&amp;quot;, source);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The driver will read from the current position of the source &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; and upload everything read from the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; until the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; reaches end of file.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_UploadFromStreamAsync.htm
&#34;&gt;&lt;code&gt;UploadFromStreamAsync&lt;/code&gt;&lt;/a&gt; method also supports providing additional options, just like the example above for &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_UploadFromBytesAsync.htm
&#34;&gt;&lt;code&gt;UploadFromBytesAsync&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;uploading-to-a-stream&#34;&gt;Uploading to a Stream&lt;/h3&gt;

&lt;p&gt;Sometimes it is more convenient for an application to upload a file to GridFS by writing the contents to an output &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; rather than providing the contents to the driver either as a byte array or an input &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;

using (var stream = await bucket.OpenUploadStreamAsync(&amp;quot;filename&amp;quot;))
{
    var id = stream.Id; // the unique Id of the file being uploaded
    // write the contents of the file to stream
    await stream.CloseAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; object returned by &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_OpenUploadStreamAsync.htm
&#34;&gt;&lt;code&gt;OpenUploadStreamAsync&lt;/code&gt;&lt;/a&gt; is actually a &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_GridFS_GridFSUploadStream.htm
&#34;&gt;&lt;code&gt;GridFSUploadStream&lt;/code&gt;&lt;/a&gt; (a subclass of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;), which has the following additional members in addition to those found in &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public abstract class GridFSUploadStream : Stream
{
    public abstract ObjectId Id { get; }
    public abstract Task AbortAsync(CancellationToken cancellationToken = default(CancellationToken));
    public abstract Task CloseAsync(CancellationToken cancellationToken = default(CancellationToken));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_GridFS_GridFSUploadStream_Id.htm
&#34;&gt;&lt;code&gt;Id&lt;/code&gt;&lt;/a&gt; property allows the calling application to know the unique Id that was assigned to the file being uploaded. &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSDownloadStream_AbortAsync..htm
&#34;&gt;&lt;code&gt;AbortAsync&lt;/code&gt;&lt;/a&gt; allows the application to abort the upload operation part-way through if it needs to. &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSUploadStream_CloseAsync..htm
&#34;&gt;&lt;code&gt;CloseAsync&lt;/code&gt;&lt;/a&gt; can be called instead of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.idisposable.dispose.aspx&#34;&gt;&lt;code&gt;Dispose&lt;/code&gt;&lt;/a&gt; to close the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; in an async way.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Calling &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSUploadStream_CloseAsync..htm&#34;&gt;&lt;code&gt;CloseAsync&lt;/code&gt;&lt;/a&gt; is optional, but recommended. Since &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; is &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.idisposable.aspx&#34;&gt;&lt;code&gt;IDisposable&lt;/code&gt;&lt;/a&gt; and it is used inside a using statement, it would be closed automatically when &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.idisposable.dispose.aspx&#34;&gt;&lt;code&gt;Dispose&lt;/code&gt;&lt;/a&gt; is called. However, in async programming we want to avoid blocking and calling &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSUploadStream_CloseAsync..htm&#34;&gt;&lt;code&gt;CloseAsync&lt;/code&gt;&lt;/a&gt; first allows the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.io.stream.aspx&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; to be closed with an async call. If you call &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSUploadStream_CloseAsync..htm&#34;&gt;&lt;code&gt;CloseAsync&lt;/code&gt;&lt;/a&gt; first then &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.idisposable.dispose.aspx&#34;&gt;&lt;code&gt;Dispose&lt;/code&gt;&lt;/a&gt; will no longer block.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;When opening an upload stream using &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_OpenUploadStreamAsync.htm
&#34;&gt;&lt;code&gt;OpenUploadStreamAsync&lt;/code&gt;&lt;/a&gt; you can provide the same options that are supported by &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_GridFS_GridFSBucket_UploadFromStreamAsync.htm
&#34;&gt;&lt;code&gt;UploadFromStreamAsync&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IGridFSBucket bucket;

var options = new GridFSUploadOptions
{
    ChunkSizeBytes = 64512, // 63KB
    Metadata = new BsonDocument
    {
        { &amp;quot;resolution&amp;quot;, &amp;quot;1080P&amp;quot; },
        { &amp;quot;copyrighted&amp;quot;, true }
    }   
});

using (var stream = await bucket.OpenUploadStreamAsync(&amp;quot;filename&amp;quot;, options))
{
    var id = stream.Id; // the unique Id of the file being uploaded
    // write the contents of the file to stream
    await stream.CloseAsync();
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/mongo-csharp-driver/2.1/reference/gridfs/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/gridfs/</guid>
      <description>

&lt;h2 id=&#34;gridfs&#34;&gt;GridFS&lt;/h2&gt;

&lt;p&gt;GridFS is a way of storing binary information larger than the maximum document size (currently 16MB). When you upload a file to GridFS the file is broken into chunks and the individual chunks are uploaded. When you download a  file from GridFS the original content is reassembled from the chunks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/gridfs/gettingstarted/&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/gridfs/uploadingfiles/&#34;&gt;Uploading files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/gridfs/downloadingfiles/&#34;&gt;Downloading files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/gridfs/findingfiles/&#34;&gt;Finding files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/gridfs/deletingandrenamingfiles/&#34;&gt;Deleting and renaming files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Eventing</title>
      <link>/mongo-csharp-driver/2.1/reference/driver_core/events/</link>
      <pubDate>Tue, 08 Sep 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/driver_core/events/</guid>
      <description>

&lt;h2 id=&#34;eventing&#34;&gt;Eventing&lt;/h2&gt;

&lt;p&gt;The .NET Driver core provides a robust model for event publication and subscription. Each event is represented by a class or struct which contains all the information related to the particular event.&lt;/p&gt;

&lt;h3 id=&#34;clusterbuilder&#34;&gt;ClusterBuilder&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Configuration_ClusterBuilder.htm
&#34;&gt;&lt;code&gt;ClusterBuilder&lt;/code&gt;&lt;/a&gt; class contains two methods for subscribing to events.&lt;/p&gt;

&lt;h4 id=&#34;ieventsubscriber&#34;&gt;IEventSubscriber&lt;/h4&gt;

&lt;p&gt;The first version of &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_Core_Configuration_ClusterBuilder_Subscribe.htm
&#34;&gt;&lt;code&gt;Subscribe&lt;/code&gt;&lt;/a&gt; takes an &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_IEventSubscriber.htm
&#34;&gt;&lt;code&gt;IEventSubscriber&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_IEventSubscriber.htm
&#34;&gt;&lt;code&gt;IEventSubscriber&lt;/code&gt;&lt;/a&gt; contains a single method to implement, &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_Core_Events_IEventSubscriber_TryGetEventHandler_1.htm
&#34;&gt;&lt;code&gt;TryGetEventHandler&lt;/code&gt;&lt;/a&gt;. It takes a generic parameter indicating the type of event and sets an out parameter with the handler.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
This method will be invoked once on each subscriber per event type. Therefore, performance of this method is not critical.
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;For instance, to handle the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_ConnectionPoolAddedConnectionEvent.htm
&#34;&gt;&lt;code&gt;ConnectionPoolAddedConnectionEvent&lt;/code&gt;&lt;/a&gt;, the following could be done:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyEventSubscriber : IEventSubscriber
{
    public bool TryGetEventHandler&amp;lt;TEvent&amp;gt;(out Action&amp;lt;TEvent&amp;gt; handler)
    {
        if(typeof(TEvent)) == typeof(ConnectionPoolAddedConnectionEvent))
        {
            handler = (Action&amp;lt;TEvent&amp;gt;)HandleConnectionPoolAddedConnectionEvent;
            return true;
        }

        handler = null;
        return false;
    }

    private void HandleConnectionPoolAddedConnectionEvent(ConnectionPoolAddedConnectionEvent @event)
    {
        Console.WriteLine(&amp;quot;Added a connection to the pool.&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could quickly become unmaintainable with multiple events. To make this easier, we have implemented the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_ReflectionEventSubscriber.htm
&#34;&gt;&lt;code&gt;ReflectionEventSubscriber&lt;/code&gt;&lt;/a&gt;. It uses reflection to find all the event handler methods inside a class based on certain constructor parameters for the method name and the binding flags. For instance, we could change the above &lt;code&gt;MyEventSubscriber&lt;/code&gt; class as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyEventSubscriber : IEventSubscriber
{
    private readonly IEventSubscriber _subscriber;

    public MyEventSubscriber()
    {
        _subscriber = new ReflectionEventSubscriber(this);
    }

    public bool TryGetEventHandler&amp;lt;TEvent&amp;gt;(out Action&amp;lt;TEvent&amp;gt; handler)
    {
        return _subscriber.TryGetEventHandler(out handler);
    }

    private void Handle(ConnectionPoolAddedConnectionEvent @event)
    {
        Console.WriteLine(&amp;quot;Added a connection to the pool.&amp;quot;);
    }

    private void Handle(ConnectionPoolRemovedConnectionEvent @event)
    {
        Console.WriteLine(&amp;quot;Removed a connection from the pool.&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
The default method name is &amp;ldquo;Handle&amp;rdquo; and the default binding flags are for public instance methods.
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Core/Core/Events/Diagnostics/PerformanceCounterEventSubscriber.cs
&#34;&gt;&lt;code&gt;PerformanceCounterEventSubscriber&lt;/code&gt;&lt;/a&gt; is a good example of utilizing the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_ReflectionEventSubscriber.htm
&#34;&gt;&lt;code&gt;ReflectionEventSubscriber&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;method&#34;&gt;Method&lt;/h4&gt;

&lt;p&gt;The second version of &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_Core_Configuration_ClusterBuilder_Subscribe.htm
&#34;&gt;&lt;code&gt;Subscribe&lt;/code&gt;&lt;/a&gt; takes an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/018hxwa8.aspx&#34;&gt;&lt;code&gt;Action&amp;lt;TEvent&amp;gt;&lt;/code&gt;&lt;/a&gt;. For example, to use a static method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main() 
{
    var builder = new ClusterBuilder();

    builder.Subscribe&amp;lt;ConnectionPoolAddedConnectionEvent&amp;gt;(Handle);

    // ... snip
}

private static void Handle(ConnectionPoolAddedConnectionEvent @event)
{
    Console.WriteLine(&amp;quot;Added a connection to the pool.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, a lambda expression could be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main() 
{
    var builder = new ClusterBuilder();

    builder.Subscribe&amp;lt;ConnectionPoolAddedConnectionEvent&amp;gt;(x =&amp;gt; Console.WriteLine(&amp;quot;Added a connection to the pool.&amp;quot;));

    // ... snip
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;operation-ids&#34;&gt;Operation Ids&lt;/h3&gt;

&lt;p&gt;Any commands that could occur based on user initiation will contain an operation identifier. This identifer can be used to link together all events that occured due to the user initiated action.&lt;/p&gt;

&lt;h3 id=&#34;clusterid-serverid-and-connectionid&#34;&gt;ClusterId, ServerId, and ConnectionId&lt;/h3&gt;

&lt;p&gt;All events will contain at least one of these identifiers. They can be used to uniquely attribute a particular event to a cluster, a server, or a connection. In addition, the ConnectionId also contains a local value and a server value where the server value contains the same value that will show up in the server logs for its connection logging.&lt;/p&gt;

&lt;h3 id=&#34;command-events&#34;&gt;Command Events&lt;/h3&gt;

&lt;p&gt;There are three events related to monitoring data sent on the wire. These are the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_CommandStartedEvent.htm
&#34;&gt;&lt;code&gt;CommandStartedEvent&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_CommandSucceededEvent.htm
&#34;&gt;&lt;code&gt;CommandSucceededEvent&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_CommandFailedEvent.htm
&#34;&gt;&lt;code&gt;CommandFailedEvent&lt;/code&gt;&lt;/a&gt;. For every started event, there will always be a succeeded or failed event.&lt;/p&gt;

&lt;p&gt;In addition, any messages sent to the server that are not already commands will be upconverted for the sake of consumption. For instance, an &lt;code&gt;OP_DELETE&lt;/code&gt; wire protocol message on server 2.4 will appear as though it were a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/delete/
&#34;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition warning&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;warning&lt;/h5&gt;
These are heavy events to generate. Do not subscribe to these unless they provide necessary information.
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Certain information has been removed for security reasons. For instance, the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/authenticate/&#34;&gt;&lt;code&gt;authenticate&lt;/code&gt;&lt;/a&gt; command will not contain the actual command or its reply. However, it will still contain the command name itself.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;commandstartedevent&#34;&gt;CommandStartedEvent&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_CommandStartedEvent.htm
&#34;&gt;&lt;code&gt;CommandStartedEvent&lt;/code&gt;&lt;/a&gt; contains, amoungst other information, the command name as well as the command itself. While the command also contains the command name, the command is potentially heavy to access and will not live beyond the lifetime of the event. Any information necessary from the command should be pulled out and used immediately or stored.&lt;/p&gt;

&lt;h4 id=&#34;commandsucceededevent&#34;&gt;CommandSucceededEvent&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_CommandSucceededEvent.htm
&#34;&gt;&lt;code&gt;CommandSucceededEvent&lt;/code&gt;&lt;/a&gt; contains, amoungst other information, the command name, the duration of the command, and the reply. The reply is potentially heavy to access and will not live beyond the lifetime of the event.  Any information necessary from the reply should be pulled out and used immediately or stored.&lt;/p&gt;

&lt;h4 id=&#34;commandfailedevent&#34;&gt;CommandFailedEvent&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_Core_Events_CommandFailedEvent.htm
&#34;&gt;&lt;code&gt;CommandFailedEvent&lt;/code&gt;&lt;/a&gt; contains, amoungst other information, the command name, the duration of the command, and the exception. The exception is potentially heavy to access and will not live beyond the lifetime of the event.  Any information necessary from the exception should be pulled out and used immediately or stored.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LINQ</title>
      <link>/mongo-csharp-driver/2.1/reference/driver/crud/linq/</link>
      <pubDate>Tue, 25 Aug 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/driver/crud/linq/</guid>
      <description>

&lt;h2 id=&#34;linq&#34;&gt;LINQ&lt;/h2&gt;

&lt;p&gt;The driver contains an implementation of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb397926.aspx&#34;&gt;LINQ&lt;/a&gt; that targets the &lt;a href=&#34;https://www.mongodb.com/docs/manual/aggregation
&#34;&gt;aggregation framework&lt;/a&gt;. The aggregation framework holds a rich query language that maps very easily from a LINQ expression tree making it straightforward to understand the translation from a LINQ statement into an aggregation framework pipeline. To see a more complicated uses of LINQ from the driver, see the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/Samples/AggregationSample.cs
&#34;&gt;AggregationSample&lt;/a&gt; source code.&lt;/p&gt;

&lt;p&gt;For the rest of this page, we&amp;rsquo;ll use the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Person
{
    public string Name { get; set; }

    public int Age { get; set; }

    public IEnumerable&amp;lt;Pet&amp;gt; Pets { get; set; }

    public int[] FavoriteNumbers { get; set; }

    public HashSet&amp;lt;string&amp;gt; FavoriteNames { get; set; }

    public DateTime CreatedAtUtc { get; set; }
}

class Pet
{
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;queryable&#34;&gt;Queryable&lt;/h3&gt;

&lt;p&gt;Hooking into the LINQ provider requires getting access to an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt; instance. The driver provides an &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoCollectionExtensions_AsQueryable.htm
&#34;&gt;&lt;code&gt;AsQueryable&lt;/code&gt;&lt;/a&gt; extension method on &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var collection = db.GetCollection&amp;lt;Person&amp;gt;(&amp;quot;people&amp;quot;);
var queryable = collection.AsQueryable();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt; instance, you can begin to compose a query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            where p.Age &amp;gt; 21
            select new { p.Name, p.Age };

// or, using method syntax

var query = collection.AsQueryable()
    .Where(p =&amp;gt; p.Age &amp;gt; 21)
    .Select(p =&amp;gt; new { p.Name, p.Age });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; which maps to the following aggregation framework pipeline:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $match: { Age: { $gt: 21 } } },
    { $project: { Name: 1, Age: 1, _id: 0 } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stages&#34;&gt;Stages&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the supported stages below:&lt;/p&gt;

&lt;h4 id=&#34;project&#34;&gt;$project&lt;/h4&gt;

&lt;p&gt;To generate a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/
&#34;&gt;&lt;code&gt;$project&lt;/code&gt;&lt;/a&gt; stage, use the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb548743.aspx&#34;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt; method. To see the list of expressions supported in the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb548743.aspx&#34;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt; method, see &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/driver/expressions/#aggregation-projections&#34;&gt;Aggregation Projections&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            select new { p.Name, p.Age };

// or

var query = collection.AsQueryable()
    .Select(p =&amp;gt; new { p.Name, p.Age });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $project: { Name: 1, Age: 1, _id: 0 } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;When projecting scalars, the driver will wrap the scalar into a document with a generated field name because MongoDB requires that output from an aggregation pipeline be documents.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            select p.Name;

var query = collection.AsQueryable()
    .Select(p =&amp;gt; p.Name);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $project: { __fld0: &amp;quot;$Name&amp;quot;, _id: 0 } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The driver will know how to read the field out and transform the results properly.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/#suppress-the-id-field&#34;&gt;By default&lt;/a&gt;, MongoDB will include the &lt;code&gt;_id&lt;/code&gt; field in the output unless explicitly excluded. The driver will automatically add this exclusion when necessary.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;match&#34;&gt;$match&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb535040.aspx&#34;&gt;&lt;code&gt;Where&lt;/code&gt;&lt;/a&gt; method is used to generate a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/
&#34;&gt;&lt;code&gt;$match&lt;/code&gt;&lt;/a&gt; stage. To see the list of expressions supported inside a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb535040.aspx&#34;&gt;&lt;code&gt;Where&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/driver/expressions/#filters&#34;&gt;Filters&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            where p.Age &amp;gt; 21
            select p;

// or

var query = collection.AsQueryable()
    .Where(p =&amp;gt; p.Age &amp;gt; 21);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $match: { Age: { $gt: 21 } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;redact&#34;&gt;$redact&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/redact/
&#34;&gt;&lt;code&gt;$redact&lt;/code&gt;&lt;/a&gt; stage is not currently supported using LINQ.&lt;/p&gt;

&lt;h4 id=&#34;limit&#34;&gt;$limit&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb300906.aspx&#34;&gt;&lt;code&gt;Take&lt;/code&gt;&lt;/a&gt; method is used to generate a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/limit/
&#34;&gt;&lt;code&gt;$limit&lt;/code&gt;&lt;/a&gt; stage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = collection.AsQueryable().Take(10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $limit: 10 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;skip&#34;&gt;$skip&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb357513.aspx&#34;&gt;&lt;code&gt;Skip&lt;/code&gt;&lt;/a&gt; method is used to generate a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/skip/
&#34;&gt;&lt;code&gt;$skip&lt;/code&gt;&lt;/a&gt; stage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = collection.AsQueryable().Skip(10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $skip: 10 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;unwind&#34;&gt;$unwind&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb548748.aspx&#34;&gt;&lt;code&gt;SelectMany&lt;/code&gt;&lt;/a&gt; method is used to generate an &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/
&#34;&gt;&lt;code&gt;$unwind&lt;/code&gt;&lt;/a&gt; stage. In addition, because of how &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/
&#34;&gt;&lt;code&gt;$unwind&lt;/code&gt;&lt;/a&gt; works, a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/
&#34;&gt;&lt;code&gt;$project&lt;/code&gt;&lt;/a&gt; stage will also be rendered. To see the list of expressions supported in the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb548748.aspx&#34;&gt;&lt;code&gt;SelectMany&lt;/code&gt;&lt;/a&gt; method, see &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/driver/expressions/#aggregation-projections&#34;&gt;Aggregation Projections&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            from pet in p.Pets
            select pet;

// or

var query = collection.AsQueryable()
    .SelectMany(p =&amp;gt; p.Pets);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $unwind: &amp;quot;$Pets&amp;quot; }
    { $project: { Pets: 1, _id: 0 } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            from pet in p.Pets
            select new { Name = pet.Name, Age = p.Age};

// or

var query = collection.AsQueryable()
    .SelectMany(p =&amp;gt; p.Pets, (p, pet) =&amp;gt; new { Name = pet.Name, Age = p.Age});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $unwind: &amp;quot;$Pets&amp;quot; }
    { $project: { Name: &amp;quot;$Pets.Name&amp;quot;, Age: &amp;quot;$Age&amp;quot;, _id: 0 } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;group&#34;&gt;$group&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb534492.aspx&#34;&gt;&lt;code&gt;GroupBy&lt;/code&gt;&lt;/a&gt; method is used to generate a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/
&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt; stage. In general, the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb534492.aspx&#34;&gt;&lt;code&gt;GroupBy&lt;/code&gt;&lt;/a&gt; method will be followed by the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb548743.aspx&#34;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt; containing the accumulators although that isn&amp;rsquo;t required. To see the list of supported accumulators, see &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/driver/expressions/#accumulators&#34;&gt;Accumulators&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            group p by p.Name into g
            select new { Name = g.Key, Count = g.Count() };

//or

var query = collection.AsQueryable()
    .GroupBy(p =&amp;gt; p.Name)
    .Select(g =&amp;gt; new { Name = g.Key, Count = g.Count() });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: &amp;quot;$Name&amp;quot;, __agg0: { $sum: 1 } } },
    { $project: { Name: &amp;quot;$_id&amp;quot;, Count: &amp;quot;$__agg0&amp;quot;, _id: 0 } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = collection.AsQueryable()
    .GroupBy(p =&amp;gt; p.Name, (k, s) =&amp;gt; new { Name = k, Count = s.Count()});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: &amp;quot;$Name&amp;quot;, Count: { $sum: 1 } } },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sort&#34;&gt;$sort&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb549264.aspx&#34;&gt;&lt;code&gt;OrderBy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb535112.aspx&#34;&gt;&lt;code&gt;ThenBy&lt;/code&gt;&lt;/a&gt; methods are used to generate a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/sort/
&#34;&gt;&lt;code&gt;$sort&lt;/code&gt;&lt;/a&gt; stage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = from p in collection.AsQueryable()
            orderby p.Name, p.Age descending
            select p;

//or

var query = collection.AsQueryable()
    .OrderBy(p =&amp;gt; p.Name)
    .ThenByDescending(p =&amp;gt; p.Age);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $sort: { Name: 1, Age: -1 } },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;geonear&#34;&gt;$geoNear&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/geoNear/
&#34;&gt;&lt;code&gt;$geoNear&lt;/code&gt;&lt;/a&gt; stage is not currently supported using LINQ.&lt;/p&gt;

&lt;h4 id=&#34;out&#34;&gt;$out&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/
&#34;&gt;&lt;code&gt;$out&lt;/code&gt;&lt;/a&gt; stage is not currently supported using LINQ.&lt;/p&gt;

&lt;h3 id=&#34;supported-methods&#34;&gt;Supported Methods&lt;/h3&gt;

&lt;p&gt;The method examples are shown in isolation, but they can be used and combined with all the other methods as well. You can view the tests for each of these methods in the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/Linq/MongoQueryableTests.cs
&#34;&gt;MongoQueryableTests&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;any&#34;&gt;Any&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.any.aspx&#34;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Any();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $limit: 1 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Any(p =&amp;gt; p.Age &amp;gt; 21);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $match: { Age: { $gt: 21 } },
    { $limit: 1 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;code&gt;Any&lt;/code&gt; has a boolean return type. Since MongoDB doesn&amp;rsquo;t support this, the driver will pull back at most 1 document. If one document was retrieved, then the result is true. Otherwise, it&amp;rsquo;s false.
&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;average&#34;&gt;Average&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.average.aspx&#34;&gt;&lt;code&gt;Average&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Average(p =&amp;gt; p.Age);

// or

var result = collection.AsQueryable().Select(p =&amp;gt; p.Age).Average();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: 1, __result: { $avg: &amp;quot;$Age&amp;quot; } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;count-and-longcount&#34;&gt;Count and LongCount&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.count.aspx&#34;&gt;&lt;code&gt;Count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.longcount.aspx&#34;&gt;&lt;code&gt;LongCount&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Count();

// or

var result = collection.AsQueryable().LongCount();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: 1, __result: { $sum: 1 } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Count(p =&amp;gt; p.Age &amp;gt; 21);

// or

var result = collection.AsQueryable().LongCount(p =&amp;gt; p.Age &amp;gt; 21);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $match : { Age { $gt: 21 } } },
    { $group: { _id: 1, __result: { $sum: 1 } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;distinct&#34;&gt;Distinct&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb348456.aspx&#34;&gt;&lt;code&gt;Distinct&lt;/code&gt;&lt;/a&gt; without an equality comparer is supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = collection.AsQueryable().Distinct();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: &amp;quot;$$ROOT&amp;quot; } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a distinct in isolation as shown above is non-sensical. Since each document in a collection contains a unique _id field, then there will be as many groups as their are documents. To properly use distinct, it should follow some form of a projection like $project or $group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var query = collection.AsQueryable()
    .Select(p =&amp;gt; new { p.Name, p.Age })
    .Distinct();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: { Name: &amp;quot;$Name&amp;quot;, Age: &amp;quot;$Age&amp;quot; } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;first-and-firstordefault&#34;&gt;First and FirstOrDefault&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.first.aspx&#34;&gt;&lt;code&gt;First&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.firstordefault.aspx&#34;&gt;&lt;code&gt;FirstOrDefault&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().First();

// or

var result = collection.AsQueryable().FirstOrDefault();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $limit: 1 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().First(p =&amp;gt; p.Age &amp;gt; 21);

// or

var result = collection.AsQueryable().FirstOrDefault(p =&amp;gt; p.Age &amp;gt; 21);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $match : { Age { $gt: 21 } } },
    { $limit: 1 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;groupby&#34;&gt;GroupBy&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;#group&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;max&#34;&gt;Max&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.max.aspx&#34;&gt;&lt;code&gt;Max&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Max(p =&amp;gt; p.Age);

// or

var result = collection.AsQueryable().Select(p =&amp;gt; p.Age).Max();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: 1, __result: { $max: &amp;quot;$Age&amp;quot; } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sum&#34;&gt;Sum&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.Sum.aspx&#34;&gt;&lt;code&gt;Sum&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Sum(p =&amp;gt; p.Age);

// or

var result = collection.AsQueryable().Select(p =&amp;gt; p.Age).Sum();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: 1, __result: { $Sum: &amp;quot;$Age&amp;quot; } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;oftype&#34;&gt;OfType&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.oftype.aspx&#34;&gt;&lt;code&gt;OfType&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// assuSumg Customer inherits from Person
var result = collection.AsQueryable().OfType&amp;lt;Customer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $match: { _t: &amp;quot;Customer&amp;quot; } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Based on configuration, the discriminator name &lt;code&gt;_t&lt;/code&gt; may be different as well as the value &lt;code&gt;&amp;quot;Customer&amp;quot;&lt;/code&gt;.
&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;orderby-orderbydescending-thenby-and-thenbydescending&#34;&gt;OrderBy, OrderByDescending, ThenBy, and ThenByDescending&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;#sort&#34;&gt;&lt;code&gt;$sort&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;select&#34;&gt;Select&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;#project&#34;&gt;&lt;code&gt;$project&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;selectmany&#34;&gt;SelectMany&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;#unwind&#34;&gt;&lt;code&gt;$unwind&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;single-and-singleordefault&#34;&gt;Single and SingleOrDefault&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.single.aspx&#34;&gt;&lt;code&gt;Single&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.singleordefault.aspx&#34;&gt;&lt;code&gt;SingleOrDefault&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Single();

// or

var result = collection.AsQueryable().SingleOrDefault();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $limit: 2 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Single(p =&amp;gt; p.Age &amp;gt; 21);

// or

var result = collection.AsQueryable().SingleOrDefault(p =&amp;gt; p.Age &amp;gt; 21);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $match : { Age { $gt: 21 } } },
    { $limit: 2 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
The limit here is 2 because the behavior of &lt;code&gt;Single&lt;/code&gt; is to throw when there is more than 1 result. Therefore, we pull back at most 2 documents and throw when 2 documents were retrieved. If this is not the behavior you wish, then &lt;code&gt;First&lt;/code&gt; is the other choice.
&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;skip-1&#34;&gt;Skip&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;#skip&#34;&gt;&lt;code&gt;$skip&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sum-1&#34;&gt;Sum&lt;/h4&gt;

&lt;p&gt;All forms of &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.queryable.sum.aspx&#34;&gt;&lt;code&gt;Sum&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = collection.AsQueryable().Sum(p =&amp;gt; p.Age);

// or

var result = collection.AsQueryable().Select(p =&amp;gt; p.Age).Sum();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    { $group: { _id: 1, __result: { $sum: &amp;quot;$Age&amp;quot; } } }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;take&#34;&gt;Take&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;#limit&#34;&gt;&lt;code&gt;$limit&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;where&#34;&gt;Where&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;#match&#34;&gt;&lt;code&gt;$match&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managing Users</title>
      <link>/mongo-csharp-driver/2.1/examples/user_management/</link>
      <pubDate>Fri, 29 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/examples/user_management/</guid>
      <description>

&lt;h2 id=&#34;how-to-manage-users&#34;&gt;How to Manage Users&lt;/h2&gt;

&lt;p&gt;While MongoDB supports many user management commands, the driver does not have any helpers for them because users are generally managed from the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/mongo-shell/
&#34;&gt;MongoDB shell&lt;/a&gt;. However, it is still possible to manage users from the driver by using the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoDatabase_RunCommandAsync__1.htm
&#34;&gt;&lt;code&gt;IMongoDatabase.RunCommandAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;listing-users&#34;&gt;Listing Users&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/usersInfo/
&#34;&gt;&lt;code&gt;usersInfo&lt;/code&gt;&lt;/a&gt; command will provide information about users in a specific database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// construct the usersInfo command
var command = new BsonDocument(&amp;quot;usersInfo&amp;quot;, 1);

// Run the command. If it fails, an exception will be thrown.
var result = await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; variable will contain a field called &amp;ldquo;users&amp;rdquo; which will contain all the users for the &amp;ldquo;products&amp;rdquo; database.&lt;/p&gt;

&lt;h2 id=&#34;creating-users&#34;&gt;Creating Users&lt;/h2&gt;

&lt;p&gt;The following example uses the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/createUser/
&#34;&gt;&lt;code&gt;createUser&lt;/code&gt;&lt;/a&gt; command to add a user to a dataase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// Construct the write concern
var writeConcern = WriteConcern.WMajority
    .With(wTimeout: TimeSpan.FromMilliseconds(5000);

// Construct the createUser command.
var command = new BsonDocument
{
    { &amp;quot;createUser&amp;quot;, &amp;quot;accountAdmin01&amp;quot; },
    { &amp;quot;pwd&amp;quot;, &amp;quot;cleartext password&amp;quot; },
    { &amp;quot;customData&amp;quot;, new BsonDocument(&amp;quot;employeeId&amp;quot;, 12345) },
    { &amp;quot;roles&amp;quot;, new BsonArray
               {
                   new BsonDocument
                   {
                       { &amp;quot;role&amp;quot;, &amp;quot;clusterAdmin&amp;quot; },
                       { &amp;quot;db&amp;quot;, &amp;quot;admin&amp;quot; }   
                   },
                   new BsonDocument
                   {
                       { &amp;quot;role&amp;quot;, &amp;quot;readAnyDatabase&amp;quot; },
                       { &amp;quot;db&amp;quot;, &amp;quot;admin&amp;quot; }   
                   },
                   &amp;quot;readWrite&amp;quot;
               }},
    { &amp;quot;writeConcern&amp;quot;, writeConcern.ToBsonDocument() }
};

// Run the command. If it fails, an exception will be thrown.
await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-users&#34;&gt;Updating Users&lt;/h2&gt;

&lt;p&gt;The following example uses the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/updateUser/
&#34;&gt;&lt;code&gt;updateUser&lt;/code&gt;&lt;/a&gt; command to update a user in a database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// Construct the updateUser command.
var command = new BsonDocument
{
    { &amp;quot;updateUser&amp;quot;, &amp;quot;appClient01&amp;quot; },
    { &amp;quot;customData&amp;quot;, new BsonDocument(&amp;quot;employeeId&amp;quot;, &amp;quot;0x3039&amp;quot;) },
    { &amp;quot;roles&amp;quot;, new BsonArray
               {
                   new BsonDocument
                   {
                       { &amp;quot;role&amp;quot;, &amp;quot;read&amp;quot; },
                       { &amp;quot;db&amp;quot;, &amp;quot;assets&amp;quot; }   
                   },
               }}
};

// Run the command. If it fails, an exception will be thrown.
await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dropping-users&#34;&gt;Dropping Users&lt;/h2&gt;

&lt;p&gt;The following example uses the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/dropUser/
&#34;&gt;&lt;code&gt;dropUser&lt;/code&gt;&lt;/a&gt; command to drop a user from a database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the database
var db = client.GetDatabase(&amp;quot;products&amp;quot;);

// Construct the dropUser command.
var command = @&amp;quot;{ dropUser: &amp;quot;&amp;quot;accountAdmin01&amp;quot;&amp;quot;,
                  writeConcern: { w: &amp;quot;&amp;quot;majority&amp;quot;&amp;quot;, wtimeout: 5000 }
                }&amp;quot;;

// Run the command. If it fails, an exception will be thrown.
await db.RunCommandAsync&amp;lt;BsonDocument&amp;gt;(command);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Even though we used a string here for the command, it could have been a BsonDocument like the other examples. Well-formed strings of valid JSON are interchangeable with BsonDocument.
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;other-user-management-commands&#34;&gt;Other User Management Commands&lt;/h2&gt;

&lt;p&gt;There are a number of &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/command/nav-user-management/
&#34;&gt;other commands&lt;/a&gt; that exist for managing users and each would be run in a similar fashion to how ones demonstrated above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Tailable Cursor</title>
      <link>/mongo-csharp-driver/2.1/examples/tailable_cursor/</link>
      <pubDate>Tue, 26 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/examples/tailable_cursor/</guid>
      <description>

&lt;h2 id=&#34;using-a-tailable-cursor&#34;&gt;Using a Tailable Cursor&lt;/h2&gt;

&lt;p&gt;MongoDB offers the option to watch a &lt;a href=&#34;https://www.mongodb.com/docs/manual/manual/core/capped-collections/
&#34;&gt;capped collection&lt;/a&gt; for changes using a &lt;a href=&#34;https://www.mongodb.com/docs/manual/manual/tutorial/create-tailable-cursor/
&#34;&gt;tailable cursor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code below &amp;ldquo;tails&amp;rdquo; the capped collection and outputs documents to the console as they are added. The method also handles the possibility of a dead cursor by tracking the field &lt;code&gt;insertDate&lt;/code&gt;. New documents are added with increasing values of &lt;code&gt;insertDate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Even though we are using &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Bson_BsonDocument.htm&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; below, it is possible to use an application defined class by replacing the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Bson_BsonDocument.htm&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; references with that of your application defined class.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private static async Task TailCollectionAsync(IMongoCollection&amp;lt;BsonDocument&amp;gt; collection)
{
    // Set lastValue to the smallest value possible
    BsonValue lastValue = BsonMinKey.Value;
    
    var options = new FindOptions&amp;lt;BsonDocument&amp;gt; 
    { 
        // Our cursor is a tailable cursor and informs the server to await
        CursorType = CursorType.TailableAwait
    };
    
    // Initially, we don&#39;t have a filter. An empty BsonDocument matches everything.
    BsonDocument filter = new BsonDocument();
    
    // NOTE: This loops forever. It would be prudent to provide some form of 
    // an escape condition based on your needs; e.g. the user presses a key.
    while (true)
    {
        // Start the cursor and wait for the initial response
        using (var cursor = await collection.FindAsync(filter, options))
        {
            // This callback will get invoked with each new document found
            await cursor.ForEachAsync(document =&amp;gt;
            {
                // Set the last value we saw 
                lastValue = document[&amp;quot;insertDate&amp;quot;];
                
                // Write the document to the console.
                await Console.WriteLineAsync(document.ToString());
            });
        }

        // The tailable cursor died so loop through and restart it
        // Now, we want documents that are strictly greater than the last value we saw
        filter = new BsonDocument(&amp;quot;$gt&amp;quot;, new BsonDocument(&amp;quot;insertDate&amp;quot;, lastId));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If multiple documents might have the exact same insert date, then using the above logic might cause you to miss some documents in the event that the cursor gets restarted. To solve this,
you could track all the documents you&amp;rsquo;ve seen by their identifiers for the same &lt;code&gt;lastValue&lt;/code&gt; and ignore them in the callback. In addition, you would need to change the &lt;code&gt;$gt&lt;/code&gt; condition to &lt;code&gt;$gte&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mixing Static and Dynamic Data</title>
      <link>/mongo-csharp-driver/2.1/examples/mixing_static_and_dynamic/</link>
      <pubDate>Tue, 26 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/examples/mixing_static_and_dynamic/</guid>
      <description>

&lt;h2 id=&#34;mixing-static-and-dynamic-data&#34;&gt;Mixing Static and Dynamic Data&lt;/h2&gt;

&lt;p&gt;Many applications have the notion of known data and unknown data. One such example would be a Blog application where there exists the known data (content, created date, tags) and unknown data (metadata) which a user is allowed to configure.&lt;/p&gt;

&lt;h2 id=&#34;the-class&#34;&gt;The Class&lt;/h2&gt;

&lt;p&gt;Continuing with the Blog example, below is how we might model the static content for a post.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Post
{
    public ObjectId Id { get; set; }
  
    public string Content { get; set; }
  
    public DateTime CreatedAtUtc { get; set; }
  
    public List&amp;lt;string&amp;gt; Tags { get; set; }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to include dynamic data, we have 2 options.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
It is still possible to filter, sort, project, update, etc&amp;hellip; this dynamic data using the same tooling described in our &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/driver/definitions/&#34;&gt;reference documentation&lt;/a&gt;.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;bsondocument-property&#34;&gt;BsonDocument Property&lt;/h3&gt;

&lt;p&gt;The first option is to include a &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;. Our class would then look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Post
{
    // previous properties
  
    public BsonDocument Metadata { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then put all the dynamic data into the &lt;code&gt;Metadata&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var post = new Post
{
    Content = &amp;quot;My Post Content&amp;quot;,
    CreatedAtUtc = DateTime.UtcNow,
    Tags = new List&amp;lt;string&amp;gt; { &amp;quot;first&amp;quot;, &amp;quot;post&amp;quot; },
    Metadata = new BsonDocument(&amp;quot;rel&amp;quot;, &amp;quot;mongodb&amp;quot;)
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, we set the static properties, but also added a &lt;code&gt;rel&lt;/code&gt; field with a value of &lt;code&gt;mongodb&lt;/code&gt; to our metadata. Not all documents may have the &lt;code&gt;rel&lt;/code&gt; field because it isn&amp;rsquo;t part of the schema. The above document would look like this in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5564b6c11de315e733f173cf&amp;quot;),
    &amp;quot;Content&amp;quot;: &amp;quot;My Post Content&amp;quot;,
    &amp;quot;CreatedAtUtc&amp;quot; : ISODate(&amp;quot;2015-05-26T18:09:05.883Z&amp;quot;),
    &amp;quot;Tags&amp;quot; : [&amp;quot;first&amp;quot;, &amp;quot;post&amp;quot;],
    &amp;quot;Metadata&amp;quot;: {
        &amp;quot;rel&amp;quot;: &amp;quot;mongodb&amp;quot;   
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this method, all our &amp;ldquo;dynamic&amp;rdquo; data is stored underneath the &lt;code&gt;Metadata&lt;/code&gt; field.&lt;/p&gt;

&lt;h3 id=&#34;extra-elements&#34;&gt;Extra Elements&lt;/h3&gt;

&lt;p&gt;The second option is to store dynamic data using the &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/bson/mapping/#supporting-extra-elements&#34;&gt;extra elements&lt;/a&gt; feature in the Bson library.&lt;/p&gt;

&lt;p&gt;Our full class would like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Post
{
    public ObjectId Id { get; set; }
  
    public string Content { get; set; }
  
    public DateTime CreatedAtUtc { get; set; }
  
    public List&amp;lt;string&amp;gt; Tags { get; set; }  
    
    [BsonExtraElements]
    public BsonDocument Metadata { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the following code to create &lt;code&gt;Post&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var post = new Post
{
    Content = &amp;quot;My Post Content&amp;quot;,
    CreatedAtUtc = DateTime.UtcNow,
    Tags = new List&amp;lt;string&amp;gt; { &amp;quot;first&amp;quot;, &amp;quot;post&amp;quot; },
    Metadata = new BsonDocument(&amp;quot;rel&amp;quot;, &amp;quot;mongodb&amp;quot;)
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our document in the database would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5564b6c11de315e733f173cf&amp;quot;),
    &amp;quot;Content&amp;quot;: &amp;quot;My Post Content&amp;quot;,
    &amp;quot;CreatedAtUtc&amp;quot; : ISODate(&amp;quot;2015-05-26T18:09:05.883Z&amp;quot;),
    &amp;quot;Tags&amp;quot; : [&amp;quot;first&amp;quot;, &amp;quot;post&amp;quot;],
    &amp;quot;rel&amp;quot;: &amp;quot;mongodb&amp;quot;   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this method, the &lt;code&gt;rel&lt;/code&gt; field is stored inline with the static content.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition warning&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;warning&lt;/h5&gt;
There is a danger with this approach that dynamic field names could clash with names already being used by members of the class.
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Administration</title>
      <link>/mongo-csharp-driver/2.1/reference/driver/admin/</link>
      <pubDate>Thu, 07 May 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/reference/driver/admin/</guid>
      <description>

&lt;h2 id=&#34;adminstration&#34;&gt;Adminstration&lt;/h2&gt;

&lt;p&gt;The administration operations exist in multiple places in the driver&amp;rsquo;s API. Database-related operations exist on the database object and collection-related operations exist on the collection object. If there isn&amp;rsquo;t a method for the admin operation you want to use, the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoDatabase_RunCommandAsync__1.htm
&#34;&gt;&lt;code&gt;RunCommandAsync&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; is available.&lt;/p&gt;

&lt;h2 id=&#34;databases&#34;&gt;Databases&lt;/h2&gt;

&lt;p&gt;These operations exist on the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_IMongoClient.htm
&#34;&gt;&lt;code&gt;IMongoClient&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;

&lt;h3 id=&#34;getting-a-database&#34;&gt;Getting a database&lt;/h3&gt;

&lt;p&gt;To get a database, use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoClient_GetDatabase.htm
&#34;&gt;&lt;code&gt;GetDatabase&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;There is no command for creating a database. The database will be created the first time it is used.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// get the test database
var db = client.GetDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-a-database&#34;&gt;Dropping a database&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoClient_DropDatabaseAsync.htm
&#34;&gt;&lt;code&gt;DropDatabaseAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// drops the test database
await client.DropDatabaseAsync(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listing-the-databases&#34;&gt;Listing the databases&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoClient_ListDatabasesAsync.htm
&#34;&gt;&lt;code&gt;ListDatabasesAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var cursor = await client.ListDatabaseAsync())
{
    var list = await cursor.ToListAsync();
    // do something with the list
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;collections&#34;&gt;Collections&lt;/h2&gt;

&lt;p&gt;These operations exists on the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;

&lt;h3 id=&#34;getting-a-collection&#34;&gt;Getting a collection&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoDatabase_GetCollection__1.htm
&#34;&gt;&lt;code&gt;GetCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; method returns an &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The generic parameter on the method defines the schema your application will use when working with the collection. Generally, this type will either be a &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/bson/bson_document/&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; which provides no schema enforcement or a &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/bson/mapping/&#34;&gt;mapped class (POCO)&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// gets a collection named &amp;quot;foo&amp;quot; using a BsonDocument
var collection = db.GetCollection&amp;lt;BsonDocument&amp;gt;(&amp;quot;foo&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on working with collections, see the &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/driver/crud/&#34;&gt;CRUD Operations section&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-collection&#34;&gt;Creating a collection&lt;/h3&gt;

&lt;p&gt;Just like databases, there is no need to create a collection before working with it. It will be created upon first use. However, certain features of collections require explicit creation. The &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoDatabase_CreateCollectionAsync.htm
&#34;&gt;&lt;code&gt;CreateCollectionAsync&lt;/code&gt;&lt;/a&gt; method allows you to specify not only a name, but also &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_CreateCollectionOptions.htm
&#34;&gt;&lt;code&gt;CreateCollectionOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// creates a capped collection named &amp;quot;foo&amp;quot; with a maximum size of 10,000 bytes
await db.CreateCollectionAsync(
    &amp;quot;foo&amp;quot;, 
    new CreateCollectionOptions
    {
        Capped = true,
        MaxSize = 10000
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-a-collection&#34;&gt;Dropping a collection&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoDatabase_DropCollectionAsync.htm
&#34;&gt;&lt;code&gt;DropCollectionAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// drops the &amp;quot;foo&amp;quot; collection
await db.DropCollectionAsync(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listing-the-collections&#34;&gt;Listing the collections&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoDatabase_ListCollectionsAsync.htm
&#34;&gt;&lt;code&gt;ListCollectionsAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var cursor = await db.ListCollectionsAsync())
{
    var list = await cursor.ToListAsync();
    // do something with the list
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;renaming-a-collection&#34;&gt;Renaming a collection&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoDatabase_RenameCollectionAsync.htm
&#34;&gt;&lt;code&gt;RenameCollectionAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// rename the &amp;quot;foo&amp;quot; collection to &amp;quot;bar&amp;quot;
await db.RenameCollectionAsync(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;indexes&#34;&gt;Indexes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; contains an &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/P_MongoDB_Driver_IMongoCollection_1_Indexes.htm
&#34;&gt;&lt;code&gt;Indexes&lt;/code&gt;&lt;/a&gt; property which gives access to all the index-related operations for a collection.&lt;/p&gt;

&lt;p&gt;A number of the methods take an &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_IndexKeysDefinition_1.htm
&#34;&gt;&lt;code&gt;IndexKeysDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;. See the documentation on the &lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/reference/driver/definitions/#index-keys &#34;&gt;index keys builder&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;creating-an-index&#34;&gt;Creating an index&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_CreateOneAsync.htm
&#34;&gt;&lt;code&gt;CreateOneAsync&lt;/code&gt;&lt;/a&gt; to create a single index. For instance, to create an ascending index on the &amp;ldquo;x&amp;rdquo; and &amp;ldquo;y&amp;rdquo; fields,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await collection.Indexes.CreateOneAsync(&amp;quot;{x: 1, y: 1}&amp;quot;);

// or

await collection.Indexes.CreateOneAsync(new BsonDocument(&amp;quot;x&amp;quot;, 1).Add(&amp;quot;y&amp;quot;, 1));

// or

await collection.Indexes.CreateOneAsync(Builders&amp;lt;BsonDocument&amp;gt;.IndexKeys.Ascending(&amp;quot;x&amp;quot;).Ascending(&amp;quot;y&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, there are a number of options available when creating index. These are present on the optional &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Driver_CreateIndexOptions.htm
&#34;&gt;&lt;code&gt;CreateIndexOptions&lt;/code&gt;&lt;/a&gt; parameter. For instance, to create a unique ascending index on &amp;ldquo;x&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await collection.Indexes.CreateOneAsync(&amp;quot;{x: 1}&amp;quot;, new CreateIndexOptions { Unique = true });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-an-index&#34;&gt;Dropping an index&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_DropOneAsync.htm
&#34;&gt;&lt;code&gt;DropOneAsync&lt;/code&gt;&lt;/a&gt; to drop a single index or the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_DropAllAsync.htm
&#34;&gt;&lt;code&gt;DropAllAsync&lt;/code&gt;&lt;/a&gt; to drop all indexes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// drop the index named &amp;quot;x_1&amp;quot;;
await collection.Indexes.DropOneAsync(&amp;quot;x_1&amp;quot;);

// drop all indexes
await collection.Indexes.DropAllAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;listing-indexes&#34;&gt;Listing indexes&lt;/h3&gt;

&lt;p&gt;To see all the indexes in a collection, use the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/M_MongoDB_Driver_IMongoIndexManager_1_ListAsync.htm
&#34;&gt;&lt;code&gt;ListAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using(var cursor = await collection.Indexes.ListAsync())
{
    var list = await cursor.ToListAsync();
    // do something with the list...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Issues &amp; Help</title>
      <link>/mongo-csharp-driver/2.1/issues_help/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/issues_help/</guid>
      <description>

&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.google.com/group/mongodb-user&#34;&gt;Discussion Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/mongodb&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bug-reports&#34;&gt;Bug Reports&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org/browse/CSHARP&#34;&gt;JIRA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve identified a security vulnerability in a driver or any other MongoDB project, please report it according to the &lt;a href=&#34;https://www.mongodb.com/docs/manual/tutorial/create-a-vulnerability-report&#34;&gt;instructions here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>/mongo-csharp-driver/2.1/examples/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/examples/</guid>
      <description>

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;A number of examples have been compiled to show a more thorough usage of certain features and how they interact.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/examples/importing_json/&#34;&gt;Importing JSON&lt;/a&gt;: How to read JSON from a file and insert it into a collection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/examples/exporting_json/&#34;&gt;Exporting JSON&lt;/a&gt;: How to read data from a collection and export it to a JSON file.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/examples/mixing_static_and_dynamic/&#34;&gt;Mixing Static and Dynamic Data&lt;/a&gt;: How to have both static and dynamic data inside your classes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/examples/tailable_cursor/&#34;&gt;Using Tailable Cursors&lt;/a&gt;: How to use a tailable cursor.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.1/mongo-csharp-driver/2.1/examples/user_management/&#34;&gt;Managing Users&lt;/a&gt;: How to manage users.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Importing JSON</title>
      <link>/mongo-csharp-driver/2.1/examples/importing_json/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.1/examples/importing_json/</guid>
      <description>

&lt;h2 id=&#34;importing-json&#34;&gt;Importing JSON&lt;/h2&gt;

&lt;p&gt;The .NET BSON library supports reading JSON documents with the &lt;a href=&#34;/mongo-csharp-driver/2.1/apidocs/html/T_MongoDB_Bson_IO_JsonReader.htm
&#34;&gt;&lt;code&gt;JsonReader&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;The program below will import all documents from a file with one document per line into the collection.&lt;/p&gt;

&lt;p&gt;Given the input file&amp;rsquo;s contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306a2dfd32ffd580e323&amp;quot;), &amp;quot;x&amp;quot; : 1.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306c2dfd32ffd580e324&amp;quot;), &amp;quot;x&amp;quot; : 2.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306e2dfd32ffd580e325&amp;quot;), &amp;quot;x&amp;quot; : 3.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;551330712dfd32ffd580e326&amp;quot;), &amp;quot;x&amp;quot; : 4.0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using MongoDB.Bson;
using MongoDB.Bson.IO;
using MongoDB.Bson.Serialization;
using MongoDB.Driver;

// ...

string inputFileName; // initialize to the input file
IMongoCollection&amp;lt;BsonDocument&amp;gt; collection; // initialize to the collection to write to.

using (var streamReader = new StreamReader(inputFileName))
{
    string line;
    while ((line = await streamReader.ReadLineAsync()) != null)
    {
        using (var jsonReader = new JsonReader(line))
        {
            var context = BsonDeserializationContext.CreateRoot(jsonReader);
            var document = collection.DocumentSerializer.Deserialize(context);
            await collection.InsertOneAsync(document);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The collection&amp;rsquo;s contents should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; db.mydata.find()
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306a2dfd32ffd580e323&amp;quot;), &amp;quot;x&amp;quot; : 1.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306c2dfd32ffd580e324&amp;quot;), &amp;quot;x&amp;quot; : 2.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5513306e2dfd32ffd580e325&amp;quot;), &amp;quot;x&amp;quot; : 3.0 }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;551330712dfd32ffd580e326&amp;quot;), &amp;quot;x&amp;quot; : 4.0 }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>