<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting_starteds on MongoDB .NET Driver</title>
    <link>/mongo-csharp-driver/2.0/getting_started/</link>
    <description>Recent content in Getting_starteds on MongoDB .NET Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2015 15:36:56 +0000</lastBuildDate>
    <atom:link href="/mongo-csharp-driver/2.0/getting_started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Connecting to the Server</title>
      <link>/mongo-csharp-driver/2.0/getting_started/connecting/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/connecting/</guid>
      <description>

&lt;h2 id=&#34;connecting:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Connecting&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instance is the root object to handle connecting to the database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var client = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will connect to a mongod or mongos running on localhost port 27017. If you&amp;rsquo;d like to use a remote host, you can provide a &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt; to the constructor or construct a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClientSettings.htm
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; object and pass it in. To see more about connecting with a client, see the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/connecting/&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
There is no connecting or disconnecting. A connection pool is used and connections are managed automatically.
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;database:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Database&lt;/h2&gt;

&lt;p&gt;From here, you&amp;rsquo;ll want to retrieve an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var db = client.GetDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will retrieve a reference to the database named &amp;ldquo;test&amp;rdquo; in MongoDB. There is no need to create the database before hand. It will get created upon first use. If you use more than one database, call GetDatabase again with a different name.&lt;/p&gt;

&lt;h2 id=&#34;collection:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Collection&lt;/h2&gt;

&lt;p&gt;From here, you&amp;rsquo;ll need to retrieve a reference to an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; instance, where &lt;code&gt;TDocument&lt;/code&gt; is the type of document with which to work. This will be either a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; or a custom class of your own. You would use a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; when the data you are working with is so free form that it would be difficult or impossible to define domain classes for it or because you want to handle the mapping yourself.&lt;/p&gt;

&lt;p&gt;One constraint on your custom class is that it must contain an &lt;code&gt;Id&lt;/code&gt; field. You can read more about customizing classes in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following class definition:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Entity
{
    public ObjectId Id { get; set; }

    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get a reference to a collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var collection = db.GetCollection&amp;lt;Entity&amp;gt;(&amp;quot;entities&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, as with database, there is no need to create a collection before it&amp;rsquo;s used. It will get created automatically.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-csharp-driver/2.0/getting_started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/</guid>
      <description>

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;This quick-start privides just enough information to get you started using the .NET driver. Refer to the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/&#34;&gt;reference guide&lt;/a&gt; for more complete information.&lt;/p&gt;

&lt;h2 id=&#34;system-requirements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;System Requirements&lt;/h2&gt;

&lt;p&gt;.NET 4.5 or later is required to utilize the libraries. It has also been tested with Mono 3.10 on OS X.&lt;/p&gt;

&lt;h3 id=&#34;core-clr:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Core CLR&lt;/h3&gt;

&lt;p&gt;As the Core CLR hasn&amp;rsquo;t shipped yet, we don&amp;rsquo;t yet have support for it. We run compatibility reports using the &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/1177943e-cfb7-4822-a8a6-e56c7905292b&#34;&gt;.NET Portability Analyzer&lt;/a&gt; to mitigate the need to make public API changes when we are ready to release compatible assemblies.&lt;/p&gt;

&lt;h2 id=&#34;nuget-installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Nuget Installation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/&#34;&gt;Nuget&lt;/a&gt; is the simplest way to get the driver. There are 4 packages available on nuget.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongodb.driver&#34;&gt;MongoDB.Driver&lt;/a&gt;: The new driver. It is mostly free of any legacy code and should be used for all new projects. More documentation can be found in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/&#34;&gt;reference guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongodb.driver.core&#34;&gt;MongoDB.Driver.Core&lt;/a&gt;: The core of the driver and a dependency of MongoDB.Driver. You will probably not use this package directly. More documentation can be found in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver_core/&#34;&gt;reference guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongodb.bson&#34;&gt;MongoDB.Bson&lt;/a&gt;: The BSON layer. It is a dependency of MongoDB.Driver.Core. It may be used by itself. More documentation can be found in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/&#34;&gt;reference guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/mongocsharpdriver&#34;&gt;mongocsharpdriver&lt;/a&gt;: The compatibility layer for those upgrading from our 1.x series. This should not be used for new projects. More information can be found in the &lt;a href=&#34;https://mongodb.github.io/mongo-csharp-driver/1.x&#34;&gt;1.x documentation&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;binary-installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Binary Installation&lt;/h2&gt;

&lt;p&gt;Alternatively, if you&amp;rsquo;d like to pull down binaries, you can do that from the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/releases&#34;&gt;releases section&lt;/a&gt; on our &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver&#34;&gt;github repository&lt;/a&gt;, which contains zip files for each release.&lt;/p&gt;

&lt;p&gt;The assembly names mostly correlate strongly with the package names above. For new applications, you&amp;rsquo;ll add references to &lt;code&gt;MongoDB.Driver.dll&lt;/code&gt;, &lt;code&gt;MongoDB.Driver.Core.dll&lt;/code&gt;, and &lt;code&gt;MongoDB.Bson.dll&lt;/code&gt;. For those working with legacy applications, you&amp;rsquo;ll also want to add a reference to &lt;code&gt;MongoDB.Driver.Legacy.dll&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reading and Writing</title>
      <link>/mongo-csharp-driver/2.0/getting_started/reading_and_writing/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/getting_started/reading_and_writing/</guid>
      <description>

&lt;h2 id=&#34;reading-and-writing:1b37fd24c24c59d59a5361df5b8a9d7f&#34;&gt;Reading and Writing&lt;/h2&gt;

&lt;p&gt;This page is a brief overview of performing basic reading and writing operations with the driver. All the operations available in the API are async utilizing &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.threading.tasks.task.aspx&#34;&gt;&lt;code&gt;Tasks&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information about interacting with the server, refer to the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/crud/&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rest of this document assumes the following class and collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Person
{
    public ObjectId Id { get; set; }

    public string Name { get; set; }

    public int Age { get; set; }

    public string Profession { get; set; }
}

var collection = db.GetCollection&amp;lt;Person&amp;gt;(&amp;quot;people&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;inserting-a-document:1b37fd24c24c59d59a5361df5b8a9d7f&#34;&gt;Inserting a document&lt;/h2&gt;

&lt;p&gt;To insert a document, use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollection_1_InsertOneAsync.htm
&#34;&gt;&lt;code&gt;InsertOneAsync&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var jane = new Person { Name = &amp;quot;Jane McJane&amp;quot;, Age = 24, Profession = &amp;quot;Hacker&amp;quot; };

await collection.InsertOneAsync(jane);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After insertion, the Jane&amp;rsquo;s &lt;code&gt;Id&lt;/code&gt; property will contain the automatically generated identifier. For more on Id generation, see the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#id-generators:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;finding-a-document:1b37fd24c24c59d59a5361df5b8a9d7f&#34;&gt;Finding a Document&lt;/h2&gt;

&lt;p&gt;To find all the people who are younger than 42, use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollectionExtensions_Find__1_1.htm
&#34;&gt;&lt;code&gt;Find&lt;/code&gt;&lt;/a&gt; method such as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var people = await collection.Find(x =&amp;gt; x.Age &amp;lt; 42).ToListAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lambda expression gets translated into the BSON filter &lt;code&gt;{ Age: { $lt: 42 } }&lt;/code&gt;. Not everything is supported via expression trees, but most of the common operations are. See the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/definitions/#filters:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;reference guide&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&#34;updating:1b37fd24c24c59d59a5361df5b8a9d7f&#34;&gt;Updating&lt;/h2&gt;

&lt;p&gt;To update a document, there are 2 methods for doing so. First, you can update specific fields. For instance, I&amp;rsquo;d like to change Tom&amp;rsquo;s profession to &amp;ldquo;Musician&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = await collection.UpdateOneAsync(
    x =&amp;gt; x.Name == &amp;quot;Tom&amp;quot;,
    Builders&amp;lt;Person&amp;gt;.Update.Set(x =&amp;gt; x.Profession, &amp;quot;Musician&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate a filter of &lt;code&gt;{ Name: &amp;quot;Tom&amp;quot; }&lt;/code&gt; and an update specification of &lt;code&gt;{ $set: { Profession: &amp;quot;Musician&amp;quot; } }&lt;/code&gt;. Only one document will get updated even if there is more than one person named &amp;ldquo;Tom&amp;rdquo; because we used &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollection_1_UpdateOneAsync.htm
&#34;&gt;&lt;code&gt;UpdateOneAsync&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollection_1_UpdateManyAsync.htm
&#34;&gt;&lt;code&gt;UpdateManyAsync&lt;/code&gt;&lt;/a&gt;. More information on updates is available in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/crud/writing/#update-and-replace:a65cffa9c73225e9b2db0699034df561&#34;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, if we want to replace a  document completely, we can use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollection_1_ReplaceOneAsync.htm
&#34;&gt;&lt;code&gt;ReplaceOneAsync&lt;/code&gt;&lt;/a&gt; method. Assuming Tom&amp;rsquo;s &lt;code&gt;Id&lt;/code&gt; value is &lt;code&gt;550c4aa98e59471bddf68eef&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var tom = await collection.Find(x =&amp;gt; x.Id == ObjectId.Parse(&amp;quot;550c4aa98e59471bddf68eef&amp;quot;))
    .SingleAsync();

tom.Name = &amp;quot;Thomas&amp;quot;;
tom.Age = 43;
tom.Profession = &amp;quot;Hacker&amp;quot;;

var result = await collection.ReplaceOneAsync(x =&amp;gt; x.Id == tom.Id, tom);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Identifiers in MongoDB are immutable, so you can&amp;rsquo;t replace a document with another one where the identifier is different.
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;deleting:1b37fd24c24c59d59a5361df5b8a9d7f&#34;&gt;Deleting&lt;/h2&gt;

&lt;p&gt;Finally, to delete Tom, you would use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollection_1_DeleteOneAsync.htm
&#34;&gt;&lt;code&gt;DeleteOneAsync&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollection_1_DeleteManyAsync.htm
&#34;&gt;&lt;code&gt;DeleteManyAsync&lt;/code&gt;&lt;/a&gt; methods, such as in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = await collection.DeleteOneAsync(x =&amp;gt; x.Id == tom.Id);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>