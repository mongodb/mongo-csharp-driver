<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>References on MongoDB .NET Driver</title>
    <link>/mongo-csharp-driver/2.0/reference/</link>
    <description>Recent content in References on MongoDB .NET Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2015 15:36:56 +0000</lastBuildDate>
    <atom:link href="/mongo-csharp-driver/2.0/reference/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Authentication</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/authentication/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/authentication/</guid>
      <description>

&lt;h2 id=&#34;authentication:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;The .NET driver supports all &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/authentication/
&#34;&gt;MongoDB authentication mechanisms&lt;/a&gt; including those in the &lt;a href=&#34;https://www.mongodb.com/docs/manual/administration/install-enterprise/
&#34;&gt;Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Authentication credentials are created by the application as instances of &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoCredential.htm
&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/a&gt; which includes static factory methods for each of the supported authentication mechanisms. A list of these instances must be passed to the driver using the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_MongoClient__ctor_1.htm
&#34;&gt;&lt;code&gt;MongoClient constructor&lt;/code&gt;&lt;/a&gt; that takes a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClientSettings.htm
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt;. When only one credential is necessary, it is possible to specify via the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/getting_started/connecting/#connection-string:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;connection string&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;default:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;Default&lt;/h3&gt;

&lt;p&gt;MongoDB 3.0 changed the default authentication mechanism from &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt; to &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;. To create a credential that will authenticate properly regardless of server version, create a credential using the following static factory method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateCredential(databaseName, username, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username:password@myserver/databaseName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the recommended approach as it will make upgrading from MongoDB 2.6 to MongoDB 3.0 seamless, even after &lt;a href=&#34;https://www.mongodb.com/docs/manual/release-notes/3.0-scram/#upgrade-mongodb-cr-to-scram&#34;&gt;upgrading the authentication schema&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
The databaseName part of the connection string indicates which database the credentials are located in. See the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/getting_started/connecting/#connection-string:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;connection string section&lt;/a&gt; for more information on connection strings.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;x-509-authentication:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;x.509 Authentication&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/authentication/#x-509-certificate-authentication&#34;&gt;x.509&lt;/a&gt; mechanism authenticates a user whose name is derived from the distinguished subject name of the x.509 certificate presented by the driver during SSL negotiation. This authentication method requires the use of &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/ssl/&#34;&gt;SSL connections&lt;/a&gt; with certificate validation and is available in MongoDB 2.6 and newer. To create a credential of this type, use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateX509Credential(username);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username@myserver/?authMechanism=MONGODB-X509
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even when using the connection string to provide the credential, the certificate must still be provided via code. This certificate can be pulled out of the trust stores on the box, or from a file. However, to be used with client authentication, the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate.aspx&#34;&gt;&lt;code&gt;X509Certificate&lt;/code&gt;&lt;/a&gt; provided to the driver must contain the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.privatekey.aspx&#34;&gt;&lt;code&gt;PrivateKey&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cert = new X509Certificate2(&amp;quot;client.pfx&amp;quot;, &amp;quot;mySuperSecretPassword&amp;quot;);

var settings = new MongoClientSettings
{
    Credentials = new[] 
    {
        MongoCredential.CreateMongoX509Credential(&amp;quot;CN=client,OU=user,O=organization,L=Some City,ST=Some State,C=Some Country&amp;quot;)
    },
    SslSettings = new SslSettings
    {
        ClientCertificates = new[] { cert },
    },
    UseSsl = true
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gssapi-kerberos:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;GSSAPI/Kerberos&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports authentication using &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/authentication/#kerberos-authentication&#34;&gt;Kerberos/GSSAPI&lt;/a&gt;. To create a Kerberos/GSSAPI credential, use the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateGssapiCredential(username, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com:password@myserver/?authMechanism=GSSAPI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Note that the username will need to have a REALM associated with it. When used in a connection string, &lt;code&gt;%40&lt;/code&gt; is the escape character for the &lt;code&gt;@&lt;/code&gt; symbol.
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If the process owner running your application is the same as the user needing authentication, you can omit the password:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreateGssapiCredential(username);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on the kerberos setup, it may be required to specify some additional properties. These may be specified in the connection string or via code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CANONICALIZE_HOST_NAME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uses the DNS server to retrieve the fully qualified domain name (FQDN) of the host.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;credential = credential.WithMechanismProperty(&amp;quot;CANONICALIZE_HOST_NAME&amp;quot;, &amp;quot;true&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=CANONICALIZE_HOSTNAME:true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;REALM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is used when the user&amp;rsquo;s realm is different from the service&amp;rsquo;s realm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;credential = credential.WithMechanismProperty(&amp;quot;REALM&amp;quot;, &amp;quot;otherrealm&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=REALM:otherrealm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SERVICE_NAME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is used when the service&amp;rsquo;s name is different that the default &lt;code&gt;mongodb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;credential = credential.WithMechanismProperty(&amp;quot;SERVICE_NAME&amp;quot;, &amp;quot;othername&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=SERVICE_NAME:othername
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, it is possible to use multiple authentication mechanism properties either via code or in the connection string. In code, call &lt;code&gt;WithMechanismProperty&lt;/code&gt; multiple times. In the connection string, separate the entries with a &lt;code&gt;,&lt;/code&gt; (comma).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40REALM.com@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=SERVICE_NAME:othername,REALM:otherrealm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ldap-plain:6b57b661b9236f856cd4f0afa1bed671&#34;&gt;LDAP (PLAIN)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory Access Protocol (LDAP) service. To create a credential of type LDAP use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var credential = MongoCredential.CreatePlainCredential(&amp;quot;$external&amp;quot;, username, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username:password@myserver/?authSource=$external&amp;amp;authMechanism=PLAIN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Note that the method refers to the plain authentication mechanism instead of LDAP because technically the driver is authenticating via the PLAIN SASL mechanism. This means that your credentials are in plain text on the wire. Therefore, PLAIN should only be used in conjunction with SSL.
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BSON</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/</guid>
      <description>

&lt;h2 id=&#34;bson-reference:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;BSON Reference&lt;/h2&gt;

&lt;p&gt;The MongoDB.Bson library handles &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt; and &lt;a href=&#34;http://json.org&#34;&gt;JSON&lt;/a&gt; as well as serialization to and from .NET types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/bson/&#34;&gt;Reading and Writing BSON/JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/bson_document/&#34;&gt;BsonDocument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/serialization/&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/&#34;&gt;Mapping Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>BsonDocument</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/bson_document/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/bson_document/</guid>
      <description>

&lt;h2 id=&#34;bsondocument:5cf4e1eeecb274a768c951aabb9995ca&#34;&gt;BsonDocument&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; is the default type used for documents. It handles dynamic documents of any complexity. For instance, the document &lt;code&gt;{ a: 1, b: [{ c: 1 }] }&lt;/code&gt; can be built as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var doc = new BsonDocument
{
    { &amp;quot;a&amp;quot;, 1 },
    { &amp;quot;b&amp;quot;, new BsonArray
           {
                new BsonDocument(&amp;quot;c&amp;quot;, 1)
           }}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, there is a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_BsonDocument_Parse.htm
&#34;&gt;&lt;code&gt;Parse&lt;/code&gt;&lt;/a&gt; method to make reading a JSON string simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var doc = BsonDocument.Parse(&amp;quot;{ a: 1, b: [{ c: 1 }] }&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/crud/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/crud/</guid>
      <description>

&lt;h2 id=&#34;crud-operations:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;CRUD Operations&lt;/h2&gt;

&lt;p&gt;All the create, read, update, and delete (CRUD) operations take a similar form and are defined on the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; interface. All the required fields take the form of a positional parameter and, if any options exists, they are passed in as an instance of an options class. For example, the following method signature exists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Task&amp;lt;long&amp;gt; CountAsync(FilterDefinition&amp;lt;TDocument&amp;gt; filter, CountOptions options = null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As described, the &lt;code&gt;filter&lt;/code&gt; is required and the &lt;code&gt;options&lt;/code&gt; can be omitted.&lt;/p&gt;

&lt;p&gt;A majority of the methods in the CRUD API take some form of a definition class. Many of these classes contain implicit conversions to make it easy to pass in common types of values like a JSON string or a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;. In addition, most of the definition classes contain a definition builder that can make it easy to build MongoDB specific syntax. See the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/definitions/&#34;&gt;Definitions and Builders&lt;/a&gt; section for more information.&lt;/p&gt;

&lt;h3 id=&#34;polymorphism:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Polymorphism&lt;/h3&gt;

&lt;p&gt;The driver supports polymorphic class hierarchies fully. To understand how discriminators are handled for entities, see the reference on &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/polymorphism/&#34;&gt;polymorphism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The requirement to use polymorphic hierarchies during CRUD operations is that the generic parameter on your collection instance must be the base class. For example, with a class hierarchy of Animals:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Animal
  - Cat
    - Lion
    - Tiger
  - Dog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The collection instance must be an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;Animal&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connecting</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/connecting/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/connecting/</guid>
      <description>

&lt;h2 id=&#34;connection-string:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Connection String&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt; is the simplest way to connect to one or more MongoDB servers. A connection string mostly follows &lt;a href=&#34;http://tools.ietf.org/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt; with the exception of the domain name. For MongoDB, it is possible to list multiple domain names separated by a comma. Below are some example connection strings&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For a standalone mongod, mongos, or a direct connection to a member of a replica set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host:27017
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To connect to multiple mongos or a replica set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host1:27017,host2:27017
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/authentication/&#34;&gt;authentication guide&lt;/a&gt; contains information on how to provide credentials.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
When connecting to a replica set, it is highly suggested that you include the replica set name as a connection string option. This will allow the driver to skip the cluster discovery step and ensure that all hosts on the seedlist are connecting to the intended replica set.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;the-database-component:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;The Database Component&lt;/h3&gt;

&lt;p&gt;The database component is optional and is used to indicate which database to authenticate against. When the database component is not provided, the &amp;ldquo;admin&amp;rdquo; database is used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host:27017/mydb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, the database by the name of &amp;ldquo;mydb&amp;rdquo; is where the credentials are stored for the application.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Some drivers utilize the database component to indicate which database to work with by default. The .NET driver, while it parses the database component, does not use the database component for anything other than authentication.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;options:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Options&lt;/h3&gt;

&lt;p&gt;Many options can be provided via the connection string. The ones that cannot may be provided in a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClientSettings.htm
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; object. To provide an option on the connection string, append a &lt;code&gt;?&lt;/code&gt; and separate multiple options by an &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host:27017/?replicaSet=rs0&amp;amp;uuidRepresentation=standard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above connection string sets the &lt;code&gt;replicaSet&lt;/code&gt; value to &lt;code&gt;rs0&lt;/code&gt; and the &lt;code&gt;uuidRepresentation&lt;/code&gt; to &lt;code&gt;standard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a comprehensive list of the available options, see the MongoDB &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h2 id=&#34;mongo-client:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Mongo Client&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; object will be the root object. It is thread-safe and is all that is needed to handle connecting to servers, monitoring servers, and performing operations against those servers. Without any arguments, constructing a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instance will connect to &amp;ldquo;localhost&amp;rdquo; port 27017.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var client = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, a connection string may be provided:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var client = new MongoClient(&amp;quot;mongodb://host:27017,host2:27017/?replicaSet=rs0&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClientSettings.htm
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; provides an in code way to set the same options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var settings = new MongoClientSettings { ReplicaSetName = &amp;quot;rs0&amp;quot; };
var client = new MongoClient(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;re-use:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Re-use&lt;/h3&gt;

&lt;p&gt;It is recommended to store a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instance in a global place, either as a static variable or in an IoC container with a singleton lifetime.&lt;/p&gt;

&lt;p&gt;However, multiple &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instances created with the same settings will utilize the same connection pools underneath. Unfortunately, certain types of settings are not able to be compared for equality. For instance, the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/P_MongoDB_Driver_MongoClientSettings_ClusterConfigurator.htm
&#34;&gt;&lt;code&gt;ClusterConfigurator&lt;/code&gt;&lt;/a&gt; property is a delegate and only its address is known for comparison. If you wish to construct multiple &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClients&lt;/code&gt;&lt;/a&gt;, ensure that your delegates are all using the same address if the intent is to share connection pools.&lt;/p&gt;

&lt;h3 id=&#34;monitoring:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Monitoring&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; utilizes an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_Core_Clusters_ICluster.htm
&#34;&gt;&lt;code&gt;ICluster&lt;/code&gt;&lt;/a&gt; from &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver_core/&#34;&gt;MongoDB.Driver.Core&lt;/a&gt; which handles monitoring the cluster.&lt;/p&gt;

&lt;h2 id=&#34;mongo-database:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Mongo Database&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; represents a database in a MongoDB server. Databases are retrieved from an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoClient.htm
&#34;&gt;&lt;code&gt;IMongoClient&lt;/code&gt;&lt;/a&gt; instance using the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoClient_GetDatabase.htm
&#34;&gt;&lt;code&gt;GetDatabase&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var db = client.GetDatabase(&amp;quot;hr&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, we have gotten the &amp;ldquo;hr&amp;rdquo; database. If the database does not exist on the server, it will be created automatically upon first use. If you want to use more than one database, call &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoClient_GetDatabase.htm
&#34;&gt;&lt;code&gt;GetDatabase&lt;/code&gt;&lt;/a&gt; once for each database you&amp;rsquo;d like to work with.&lt;/p&gt;

&lt;h3 id=&#34;re-use-1:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Re-use&lt;/h3&gt;

&lt;p&gt;The implementation of &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; provided by a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; is thread-safe and is safe to be stored globally or in an IoC container.&lt;/p&gt;

&lt;h3 id=&#34;mongo-collection:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Mongo Collection&lt;/h3&gt;

&lt;p&gt;An &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; represents a collection in a MongoDB database. Collections are retrieved from an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoDatabase.htm
&#34;&gt;&lt;code&gt;IMongoDatabase&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_GetCollection__1.htm
&#34;&gt;&lt;code&gt;GetCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var collection = db.GetCollection&amp;lt;BsonDocument&amp;gt;(&amp;quot;people&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, we have gotten the &amp;ldquo;people&amp;rdquo; collection. IF the collection does not exist on the server, it will be created automatically upon first use. If you want to use more than one database, call &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoDatabase_GetCollection__1.htm
&#34;&gt;&lt;code&gt;GetCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; once for each database you&amp;rsquo;d like to work with.&lt;/p&gt;

&lt;p&gt;The generic parameter &lt;code&gt;TDocument&lt;/code&gt; is the type of document that is stored in your collection. It can, effectively, be any type that can be mapped to and from BSON. The driver utilizes the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/&#34;&gt;BSON library&lt;/a&gt; to handle this mapping. The most common types you will use are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Custom Class - useful for representing known schemas. See the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/&#34;&gt;mapping section&lt;/a&gt; for more information. The majority of applications will not work with dynamic schemas, but rather with something more rigid. In addition, if you work in a static language, it is nice to work with static types that provide compile time type checking.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; - useful for representing dynamic schemas.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;It is possible to mix both these models by utilizing a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; inside your custom class.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A majority of the methods and extension methods for an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; utilize the &lt;code&gt;TDocument&lt;/code&gt; generic parameter in some fashion.&lt;/p&gt;

&lt;h3 id=&#34;re-use-2:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Re-use&lt;/h3&gt;

&lt;p&gt;The implementation of &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IMongoCollection_1.htm
&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; ultimately provided by a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_MongoClient.htm
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; is thread-safe and is safe to be stored globally or in an IoC container.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Conventions</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/mapping/conventions/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/mapping/conventions/</guid>
      <description>

&lt;h2 id=&#34;conventions:de7544cb3809030281cea13d469fab66&#34;&gt;Conventions&lt;/h2&gt;

&lt;p&gt;When &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#automap:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;automapping&lt;/a&gt; a class, there are a lot of decisions that need to be made. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which members of the class should be serialized&lt;/li&gt;
&lt;li&gt;Which member of the class is the “Id”&lt;/li&gt;
&lt;li&gt;What element name should be used in the BSON document&lt;/li&gt;
&lt;li&gt;If the class is being used polymorphically, what discriminator values are used&lt;/li&gt;
&lt;li&gt;What should happen if a BSON document has elements we don’t recognize&lt;/li&gt;
&lt;li&gt;Does the member have a default value&lt;/li&gt;
&lt;li&gt;Should the default value be serialized or ignored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answers to these questions are represented by a set of “conventions”. For each convention, there is a default convention that is the most likely one you will be using, but you can override individual conventions as necessary.&lt;/p&gt;

&lt;p&gt;If you want to use your own conventions that differ from the defaults, simply create an instance of &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_ConventionPack.htm
&#34;&gt;&lt;code&gt;ConventionPack&lt;/code&gt;&lt;/a&gt;, add in the conventions you want to use, and then register that pack. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var pack = new ConventionPack();
pack.Add(new CamelCaseElementNameConvention());

ConventionRegistry.Register(
   &amp;quot;My Custom Conventions&amp;quot;,
   pack,
   t =&amp;gt; t.FullName.StartsWith(&amp;quot;MyNamespace.&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third parameter is a filter function that defines when this convention pack should be used. Above, we are saying that any classes whose full names begin with &amp;ldquo;MyNamespace.&amp;rdquo; should use these conventions.&lt;/p&gt;

&lt;h2 id=&#34;custom-conventions:de7544cb3809030281cea13d469fab66&#34;&gt;Custom Conventions&lt;/h2&gt;

&lt;p&gt;In addition to pre-packaged conventions, it is possible to write your own. There are 4 classes of conventions which can be created and registered. These 4 classes of conventions correspond with the 4 stages in which they will be run.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Class Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IClassMapConvention.htm
&#34;&gt;&lt;code&gt;IClassMapConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against the class map.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Member Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IMemberMapConvention.htm
&#34;&gt;&lt;code&gt;IMemberMapConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against each member map discovered during the Class stage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Creator Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_ICreatorMapConvention.htm
&#34;&gt;&lt;code&gt;ICreatorMapConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against each CreatorMap discovered during the Class stage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Post Processing Stage:&lt;/strong&gt; &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IPostProcessingConvention.htm
&#34;&gt;&lt;code&gt;IPostProcessingConvention&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run against the class map.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conventions get run in the order they were registered in each stage. The default set of conventions is registered first. This allows any user registered conventions to override the values applied by the default conventions. Hence, it is possible that certain values may get applied and overwritten. It is up to the user to ensure that the order is correct.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If a custom implementation of an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IPostProcessingConvention.htm&#34;&gt;&lt;code&gt;IPostProcessingConvention&lt;/code&gt;&lt;/a&gt; is registered before a customer implementation of an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IClassMapConvention.htm&#34;&gt;&lt;code&gt;IClassMapConvention&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_IClassMapConvention.htm&#34;&gt;&lt;code&gt;IClassMapConvention&lt;/code&gt;&lt;/a&gt; will be run first because the Class Stage is before the Post Processing Stage.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;example:de7544cb3809030281cea13d469fab66&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;As an example, we will write a custom convention to name all the elements the corresponding lower-case version of the member name. We can implement this convention as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class LowerCaseElementNameConvention : IMemberMapConvention 
{
    public void Apply(BsonMemberMap memberMap) 
    {
        memberMap.SetElementName(memberMap.MemberName.ToLower());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you are doing one-off conventions like this, it might be easier to create them with a simple lambda expresion instead. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var pack = new ConventionPack();
pack.AddMemberMapConvention(
    &amp;quot;LowerCaseElementName&amp;quot;,
    m =&amp;gt; m.SetElementName(m.MemberName.ToLower()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the best examples of writing custom conventions, it is good to consult the source for the pre-packaged conventions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Definitions and Builders</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/definitions/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/definitions/</guid>
      <description>

&lt;h2 id=&#34;definitions-and-builders:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Definitions and Builders&lt;/h2&gt;

&lt;p&gt;The driver has introduced a number of types related to the specification of filters, updates, projections, sorts, etc&amp;hellip; These types are used throughout the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/crud/&#34;&gt;API&lt;/a&gt;. In addition, most of them have builders as well to aid in their creation.&lt;/p&gt;

&lt;h2 id=&#34;fields:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Fields&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_FieldDefinition_1.htm
&#34;&gt;&lt;code&gt;FieldDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_FieldDefinition_2.htm
&#34;&gt;&lt;code&gt;FieldDefinition&amp;lt;TDocument, TField&amp;gt;&lt;/code&gt;&lt;/a&gt; define how to get a field name. They are implicitly convertible from a string, so that you can simply pass the field name you&amp;rsquo;d like.&lt;/p&gt;

&lt;p&gt;For instance, with a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;, the following will be true:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// method definition
string GetFieldName&amp;lt;TDocument&amp;gt;(FieldDefinition&amp;lt;TDocument&amp;gt; field);

// invocation
var fieldName = GetFieldName&amp;lt;BsonDocument&amp;gt;(&amp;quot;fun&amp;quot;);

fieldName.Should().Be(&amp;quot;fun&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you are working with a &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/&#34;&gt;mapped class&lt;/a&gt;, then 2 further options exist.&lt;/p&gt;

&lt;p&gt;First, most locations that accept a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_FieldDefinition_1.htm
&#34;&gt;&lt;code&gt;FieldDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_FieldDefinition_2.htm
&#34;&gt;&lt;code&gt;FieldDefinition&amp;lt;TDocument, TField&amp;gt;&lt;/code&gt;&lt;/a&gt; will also have an overload (via extension method) that accepts a lambda expression. Given the following class definition marked with the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonElementAttribute.htm
&#34;&gt;&lt;code&gt;BsonElementAttribute&lt;/code&gt;&lt;/a&gt; instructing the use of a different field name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Person
{
    [BsonElement(&amp;quot;fn&amp;quot;)]
    public string FirstName { get; set; }

    [BsonElement(&amp;quot;fn&amp;quot;)]
    public string LastName { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the following will be true.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// method definition
string GetFieldName&amp;lt;TDocument&amp;gt;(Expression&amp;lt;Func&amp;lt;TDocument, object&amp;gt;&amp;gt; field);

// invocation
var fieldName = GetFieldName&amp;lt;Person&amp;gt;(x =&amp;gt; x.FirstName);

fieldName.Should().Be(&amp;quot;fn&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the same way, since we know the type of document, &lt;code&gt;Person&lt;/code&gt; in this case, we can also translate fields names provided as a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// method definition
string GetFieldName&amp;lt;TDocument&amp;gt;(FieldDefinition&amp;lt;TDocument&amp;gt; field);

// invocation
var fieldName = GetFieldName&amp;lt;Person&amp;gt;(&amp;quot;FirstName&amp;quot;);

fieldName.Should().Be(&amp;quot;fn&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we don&amp;rsquo;t validate that the provided string exists as a mapped field, so it is still possible to provide a field that hasn&amp;rsquo;t been mapped:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// method definition
string GetFieldName&amp;lt;TDocument&amp;gt;(FieldDefinition&amp;lt;TDocument&amp;gt; field);

// invocation
var fieldName = GetFieldName&amp;lt;Person&amp;gt;(&amp;quot;fn&amp;quot;);

fieldName.Should().Be(&amp;quot;fn&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filters:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Filters&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_FilterDefinition_1.htm
&#34;&gt;&lt;code&gt;FilterDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; defines a filter. It is implicity convertible from both a JSON string as well as a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;. Given the following method, all the following are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// method definition
BsonDocument Filter(FilterDefinition&amp;lt;BsonDocument&amp;gt; filter);

// invocation
var doc = Filter(&amp;quot;{ x: 1 }&amp;quot;);
doc.ToJson().Should().Be(&amp;quot;{ x: 1 }&amp;quot;);

var doc = Filter(new BsonDocument(&amp;quot;x&amp;quot;, 1));
doc.ToJson().Should().Be(&amp;quot;{ x: 1 }&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;filter-definition-builder:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Filter Definition Builder&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/FilterDefinitionBuilderTests.cs
&#34;&gt;tests&lt;/a&gt; for examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_FilterDefinitionBuilder_1.htm
&#34;&gt;&lt;code&gt;FilterDefinitionBuilder&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; provides a nice API for building up both simple and complex &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/
&#34;&gt;MongoDB queries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, to build up the filter &lt;code&gt;{ x: 10, y: { $lt: 20 } }&lt;/code&gt;, the following calls are all comparable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = Builders&amp;lt;BsonDocument&amp;gt;.Filter;
var filter = builder.Eq(&amp;quot;x&amp;quot;, 10) &amp;amp; builder.Lt(&amp;quot;y&amp;quot;, 20);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
Note that the &lt;code&gt;&amp;amp;&lt;/code&gt; operator is overloaded. Other overloaded operators include the &lt;code&gt;|&lt;/code&gt; operator for &amp;ldquo;or&amp;rdquo; and the &lt;code&gt;!&lt;/code&gt; operator for &amp;ldquo;not&amp;rdquo;.
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Given the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Widget
{
    [BsonElement(&amp;quot;x&amp;quot;)]
    public int X { get; set; }

    [BsonElement(&amp;quot;y&amp;quot;)]
    public int Y { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can achieve the same result in the typed variant:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = Builders&amp;lt;Widget&amp;gt;.Filter;
var filter = builder.Eq(x =&amp;gt; x.X, 10) &amp;amp; builder.Lt(x =&amp;gt; x.Y, 20);

// or

var filter = builder.Eq(&amp;quot;X&amp;quot;, 10) &amp;amp; builder.Lt(&amp;quot;Y&amp;quot;, 20);

// or

var filter = builder.Eq(&amp;quot;x&amp;quot;, 10) &amp;amp; builder.Lt(&amp;quot;y&amp;quot;, 20);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via a lambda expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var filter = Builders&amp;lt;Widget&amp;gt;.Filter.Where(x =&amp;gt; x.X == 10 &amp;amp;&amp;amp; x.Y &amp;lt; 20);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on valid lambda expressions, see the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/expressions/&#34;&gt;expressions documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;array-operators:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Array Operators&lt;/h4&gt;

&lt;p&gt;When using entities with properties or fields that serialize to arrays, you can use the methods prefixed with &amp;ldquo;Any&amp;rdquo; to compare the entire array against a single item.&lt;/p&gt;

&lt;p&gt;Given the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Post
{
    public IEnumerable&amp;lt;string&amp;gt; Tags { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see if any of the tags equals &amp;ldquo;mongodb&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var filter = Builders&amp;lt;Post&amp;gt;.Filter.AnyEq(x =&amp;gt; x.Tags, &amp;quot;mongodb&amp;quot;);

// This will NOT compile:
// var filter = Builders&amp;lt;Post&amp;gt;.Filter.Eq(x =&amp;gt; x.Tags, &amp;quot;mongodb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipelines:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Pipelines&lt;/h2&gt;

&lt;p&gt;A pipeline definition defines an entire aggregation pipeline. It is implicitly convertible from a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;List&amp;lt;BsonDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument[]&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IPipelineStageDefinition.htm
&#34;&gt;&lt;code&gt;List&amp;lt;IPipelineStageDefinition&amp;gt;&lt;/code&gt;&lt;/a&gt; , and a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IPipelineStageDefinition.htm
&#34;&gt;&lt;code&gt;IPipelineStageDefinition[]&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;PipelineDefinition pipeline = new BsonDocument[] 
{
    new BsonDocument { { &amp;quot;$match&amp;quot;, new BsonDocument(&amp;quot;x&amp;quot;, 1) } },
    new BsonDocument { { &amp;quot;$sort&amp;quot;, new BsonDocument(&amp;quot;y&amp;quot;, 1) } }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;There is no builder for a PipelineDefinition. In most cases, the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IAggregateFluent_1.htm&#34;&gt;&lt;code&gt;IAggregateFluent&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; interface would be used which is returned from the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollectionExtensions_Aggregate__1.htm&#34;&gt;&lt;code&gt;IMongoCollection&amp;lt;TDocument&amp;gt;.Aggregate&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;projections:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Projections&lt;/h2&gt;

&lt;p&gt;There are two forms of a projection definition, one where the type of the projection is known (&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_ProjectionDefinition_2.htm
&#34;&gt;&lt;code&gt;ProjectionDefinition&amp;lt;TDocument, TProjection&amp;gt;&lt;/code&gt;&lt;/a&gt;) and one where the type of the projection is not yet known (&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_ProjectionDefinition_1.htm
&#34;&gt;&lt;code&gt;ProjectionDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;). The latter, while implicitly convertible to the first, is merely used as a building block. The &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/crud/&#34;&gt;high-level APIs&lt;/a&gt; that take a projection will always take the former. This is because, when determining how to handle a projection client-side, it is not enough to know what fields and transformations will take place. It also requires that we know how to interpret the projected shape as a .NET type. Since the driver allows you to work with custom classes, it is imperative that any projection also include the &amp;ldquo;interpretation instructions&amp;rdquo; for projecting into a custom class.&lt;/p&gt;

&lt;h3 id=&#34;projection-definition-builder:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Projection Definition Builder&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/ProjectionDefinitionBuilderTests.cs
&#34;&gt;tests&lt;/a&gt; for examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_ProjectionDefinitionBuilder_1.htm
&#34;&gt;&lt;code&gt;ProjectionDefinitionBuilder&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; exists to make it easier to build up projections in MongoDB&amp;rsquo;s syntax. To render the projection &lt;code&gt;{ x: 1, y: 1, _id: 0 }&lt;/code&gt;, the following should be done:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var projection = Builders&amp;lt;BsonDocument&amp;gt;.Projection.Include(&amp;quot;x&amp;quot;).Include(&amp;quot;y&amp;quot;).Exclude(&amp;quot;_id&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;code&gt;Widget&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Widget
{
    public ObjectId Id { get; set; }

    [BsonElement(&amp;quot;x&amp;quot;)]
    public int X { get; set; }

    [BsonElement(&amp;quot;y&amp;quot;)]
    public int Y { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can render the same projection in a couple of ways:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Include(&amp;quot;X&amp;quot;).Include(&amp;quot;Y&amp;quot;).Exclude(&amp;quot;Id&amp;quot;);

// or

var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Include(&amp;quot;x&amp;quot;).Include(&amp;quot;y&amp;quot;).Exclude(&amp;quot;_id&amp;quot;);

// or

var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Include(x =&amp;gt; x.X).Include(x =&amp;gt; x.Y).Exclude(x =&amp;gt; x.Id);

// or

var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Expression(x =&amp;gt; new { X = x.X, Y = x.Y });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This last projection where we&amp;rsquo;ve used the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_ProjectionDefinitionBuilder_1_Expression__1.htm
&#34;&gt;&lt;code&gt;Expression&lt;/code&gt;&lt;/a&gt; method is subtly different as is explained below, and its return type is a (&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_ProjectionDefinition_2.htm
&#34;&gt;&lt;code&gt;ProjectionDefinition&amp;lt;TDocument, TProjection&amp;gt;&lt;/code&gt;&lt;/a&gt;) as opposed to the others which return a (&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_ProjectionDefinition_1.htm
&#34;&gt;&lt;code&gt;ProjectionDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&#34;lambda-expressions:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Lambda Expressions&lt;/h4&gt;

&lt;p&gt;The driver supports using expression trees to render projections. The same expression tree will sometimes render differently when used in a Find operation versus when used in an Aggregate operation. Inherently, a lambda expression contains all the information necessary to form both the projection on the server as well as the client-side result and requires no further information.&lt;/p&gt;

&lt;h5 id=&#34;find:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Find&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/Linq/Translators/FindProjectionTranslatorTests.cs
&#34;&gt;tests&lt;/a&gt; for examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When a Find projection is defined using a lambda expression, it is run client-side. The driver inspects the lambda expression to determine which fields are referenced and automatically constructs a server-side projection to return only those fields.&lt;/p&gt;

&lt;p&gt;Given the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Widget
{
    public ObjectId Id { get; set; }

    [BsonElement(&amp;quot;x&amp;quot;)]
    public int X { get; set; }

    [BsonElement(&amp;quot;y&amp;quot;)]
    public int Y { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following lambda expressions will all result in the projection &lt;code&gt;{ x: 1, y: 1, _id: 0 }&lt;/code&gt;. This is because we inspect the expression tree to discover all the fields that are used and tell the server to include them. We then run the lambda expression client-side. As such, Find projections support virtually the entire breadth of the C# language.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Expression(x =&amp;gt; new { X = x.X, Y = x.Y });

var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Expression(x =&amp;gt; new { Sum = x.X + x.Y });

var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Expression(x =&amp;gt; new { Avg = (x.X + x.Y) / 2 });

var projection = Builders&amp;lt;Widget&amp;gt;.Projection.Expression(x =&amp;gt; (x.X + x.Y) / 2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; field is excluded automatically when we know for certain that it isn&amp;rsquo;t necessary, as is the case in all the above examples.&lt;/p&gt;

&lt;h5 id=&#34;aggregate:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Aggregate&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/Linq/Translators/AggregateProjectionTranslatorTests_Project.cs
&#34;&gt;tests&lt;/a&gt; for examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When an aggregate projection is defined using a lambda expression, a majority of the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/#expression-operators
&#34;&gt;aggregation expression operators&lt;/a&gt; are supported and translated. Unlike a project for Find, no part of the lambda expression is run client-side. This means that all expressions in a projection for the &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/aggregation-pipeline/
&#34;&gt;Aggregation Framework&lt;/a&gt; must be expressible on the server.&lt;/p&gt;

&lt;h5 id=&#34;grouping:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Grouping&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/Linq/Translators/AggregateProjectionTranslatorTests_Group.cs
&#34;&gt;tests&lt;/a&gt; for examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A projection is also used when performing grouping in the &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/aggregation-pipeline/
&#34;&gt;Aggregation Framework&lt;/a&gt;. In addition to the expression operators used in an aggregate projection, the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/#accumulator-operator
&#34;&gt;aggregation accumulator operators&lt;/a&gt; are also supported.&lt;/p&gt;

&lt;h2 id=&#34;sorts:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Sorts&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_SortDefinition_1.htm
&#34;&gt;&lt;code&gt;SortDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; defines how to render a valid sort document. It is implicity convertible from both a JSON string as well as a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;. Given the following method, all the following are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// method definition
BsonDocument Sort(SortDefinition&amp;lt;BsonDocument&amp;gt; filter);

// invocation
var doc = Sort(&amp;quot;{ x: 1 }&amp;quot;);
doc.ToJson().Should().Be(&amp;quot;{x : 1 }&amp;quot;);

var doc = Sort(new BsonDocument(&amp;quot;x&amp;quot;, 1));
doc.ToJson().Should().Be(&amp;quot;{ x: 1 }&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sort-definition-builder:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Sort Definition Builder&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/SortDefinitionBuilderTests.cs
&#34;&gt;tests&lt;/a&gt; for examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_SortDefinitionBuilder_1.htm
&#34;&gt;&lt;code&gt;SortDefinitionBuilder&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; provides a nice API for building up &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/method/cursor.sort/
&#34;&gt;MongoDB sort syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, to build up the sort &lt;code&gt;{ x: 1, y: -1 }&lt;/code&gt;, do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = Builders&amp;lt;BsonDocument&amp;gt;.Sort;
var sort = builder.Ascending(&amp;quot;x&amp;quot;).Descending(&amp;quot;y&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Widget
{
    [BsonElement(&amp;quot;x&amp;quot;)]
    public int X { get; set; }

    [BsonElement(&amp;quot;y&amp;quot;)]
    public int Y { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can achieve the same result in the typed variant:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = Builders&amp;lt;Widget&amp;gt;.Sort;
var sort = builder.Ascending(x =&amp;gt; x.X).Descending(x =&amp;gt; x.Y);

// or

var sort = builder.Ascending(&amp;quot;X&amp;quot;).Descending(&amp;quot;Y&amp;quot;);

// or

var sort = builder.Ascending(&amp;quot;x&amp;quot;).Descending(&amp;quot;y&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updates:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Updates&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_UpdateDefinition_1.htm
&#34;&gt;&lt;code&gt;UpdateDefinition&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; defines how to render a valid update document. It is implicity convertible from both a JSON string as well as a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt;. Given the following method, all the following are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// method definition
BsonDocument Update(UpdateDefinition&amp;lt;BsonDocument&amp;gt; filter);

// invocation
var doc = Update(&amp;quot;{ $set: { x: 1 } }&amp;quot;);
doc.ToJson().Should().Be(&amp;quot;{ $set: { x: 1 } }&amp;quot;);

var doc = Sort(new BsonDocument(&amp;quot;$set&amp;quot;, new BsonDocument(&amp;quot;x&amp;quot;, 1)));
doc.ToJson().Should().Be(&amp;quot;{ $set: { x: 1 } }&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-definition-builder:ce6bd7650aa92e884a2bb6da9703168d&#34;&gt;Update Definition Builder&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/UpdateDefinitionBuilderTests.cs
&#34;&gt;tests&lt;/a&gt; for examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_UpdateDefinitionBuilder_1.htm
&#34;&gt;&lt;code&gt;UpdateDefinitionBuilder&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt; provides a nice API for building the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/update/
&#34;&gt;MongoDB update specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, to build up the update &lt;code&gt;{ $set: { x: 1, y: 3 }, $inc: { z: 1 } }&lt;/code&gt;, do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = Builders&amp;lt;BsonDocument&amp;gt;.Update;
var update = builder.Set(&amp;quot;x&amp;quot;, 1).Set(&amp;quot;y&amp;quot;, 3).Inc(&amp;quot;z&amp;quot;, 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Widget
{
    [BsonElement(&amp;quot;x&amp;quot;)]
    public int X { get; set; }

    [BsonElement(&amp;quot;y&amp;quot;)]
    public int Y { get; set; }

    [BsonElement(&amp;quot;z&amp;quot;)]
    public int Z { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can achieve the same result in a typed variant:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = Builders&amp;lt;Widget&amp;gt;.Update;
var update = builder.Set(x =&amp;gt; x.X, 1).Set(x =&amp;gt; x.Y, 3).Inc(x =&amp;gt; x.Z, 1);

// or

var update = builder.Set(&amp;quot;X&amp;quot;, 1).Set(&amp;quot;Y&amp;quot;, 3).Inc(&amp;quot;Z&amp;quot;, 1);

// or

var update = builder.Set(&amp;quot;x&amp;quot;, 1).Set(&amp;quot;y&amp;quot;, 3).Inc(&amp;quot;z&amp;quot;, 1);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Driver</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/</guid>
      <description>

&lt;h2 id=&#34;driver-reference:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Driver Reference&lt;/h2&gt;

&lt;p&gt;The MongoDB .NET Driver is mostly just a wrapper around &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver_core/&#34;&gt;MongoDB.Driver.Core&lt;/a&gt;. It takes the very verbose and low-level core driver and creates a nice high-level API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/connecting/&#34;&gt;Connecting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/authentication/&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/ssl/&#34;&gt;SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/definitions/&#34;&gt;Definitions and Builders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/driver/crud/&#34;&gt;CRUD Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Indexes&lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Experimental Features&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Driver Core</title>
      <link>/mongo-csharp-driver/2.0/reference/driver_core/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver_core/</guid>
      <description>

&lt;h2 id=&#34;driver-core:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Driver Core&lt;/h2&gt;

&lt;p&gt;Driver Core is a full driver with complete support for all types of deployment configurations, authentication, SSL, and cursors. The API is verbose, but highly configurable which is why it&amp;rsquo;s a great solution to build higher-level APIs upon. The [MongoDB .NET Driver](/mongo-csharp-driver/2.0/reference/driver/ is built upon Driver Core.&lt;/p&gt;

&lt;h2 id=&#34;services:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Services&lt;/h2&gt;

&lt;p&gt;Driver core provides a number of services that higher-level drivers can utilize either implicitly or explicitly.&lt;/p&gt;

&lt;h3 id=&#34;connection-pooling:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Connection Pooling&lt;/h3&gt;

&lt;p&gt;Connection pooling is provided for every server that is discovered. There are a number of settings that govern behavior ranging from connection lifetimes to the maximum number of connections in the pool.&lt;/p&gt;

&lt;h3 id=&#34;server-monitoring:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Server Monitoring&lt;/h3&gt;

&lt;p&gt;Each server that is discovered is monitored. By default, this monitoring happens every 10 seconds and consists of an &lt;code&gt;{ ismaster: 1 }&lt;/code&gt; call followed by a &lt;code&gt;{ buildinfo: 1 }&lt;/code&gt; call. When servers go down, the frequency of these calls will be increased to 500 milliseconds. See the &lt;a href=&#34;https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring-summary.rst&#34;&gt;Server Discovery and Monitory Specification&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;server-selection:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Server Selection&lt;/h3&gt;

&lt;p&gt;An API is provided to allow for robust and configurable server selection capabilities. These capabilities align with the &lt;a href=&#34;https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst&#34;&gt;Server Selection Specification&lt;/a&gt;, but are also extensible if additional needs are required.&lt;/p&gt;

&lt;h3 id=&#34;operations:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Operations&lt;/h3&gt;

&lt;p&gt;A large number of operations have been implemented for everything from a generic command like &amp;ldquo;ismaster&amp;rdquo; to the extremely complicated bulk write (&amp;ldquo;insert&amp;rdquo;, &amp;ldquo;update&amp;rdquo;, and &amp;ldquo;delete&amp;rdquo;) commands and presented as instantiatable classes. These classes handle version checking the server to ensure that they will function against all versions of the server in which they exist as well as ensuring that subsequent correlated operations (such as get more&amp;rsquo;s for cursors) function correctly.&lt;/p&gt;

&lt;h3 id=&#34;bindings:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Bindings&lt;/h3&gt;

&lt;p&gt;Bindings glue together server selection and operation execution by influencing how and where operations get executed. It would be possible to construct bindings that, for instance, pipeline multiple operations down the same connection or ensure that OP_GETMORE requests are sent down the same connection as the initial OP_QUERY.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Expressions</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/expressions/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/expressions/</guid>
      <description>

&lt;h2 id=&#34;expressions:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Expressions&lt;/h2&gt;

&lt;p&gt;Many methods in the driver accept expressions as an argument.&lt;/p&gt;

&lt;p&gt;For the rest of this page, we&amp;rsquo;ll use the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Person
{
    public string Name { get; set; }

    public int Age { get; set; }

    public IEnumerable&amp;lt;Pet&amp;gt; Pets { get; set; }

    public int[] FavoriteNumbers { get; set; }
}

class Pet
{
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filters:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Filters&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll walk through the supported expressions below. The &lt;a href=&#34;https://github.com/mongodb/mongo-csharp-driver/blob/master/src/MongoDB.Driver.Tests/Linq/Translators/PredicateTranslatorTests.cs
&#34;&gt;tests&lt;/a&gt; are also a good reference.&lt;/p&gt;

&lt;h3 id=&#34;comparison:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Comparison&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/#comparison
&#34;&gt;MongoDB documentation&lt;/a&gt; for more information on each operator.&lt;/p&gt;

&lt;h4 id=&#34;eq:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$eq&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Name == &amp;quot;Jack&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Name: &#39;Jack&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
This is the short form for equality. Depending on context, this might generate &lt;code&gt;{ Name: { $eq: &#39;Jack&#39; } }&lt;/code&gt;.
&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;gt:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$gt&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Age &amp;gt; 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $gt: 10 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;gte:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$gte&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Age &amp;gt;= 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $gte: 10 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;lt:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$lt&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Age &amp;lt; 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $lt: 10 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;lte:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$lte&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Age &amp;lt;= 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $lte: 10 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ne:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$ne&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Age != 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $ne: 10 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;in:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$in&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int[] localAges = new [] { 10, 20, 30 };
Find(p =&amp;gt; localAges.Contains(p.Age));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $in: [10, 20, 30] } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nin:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$nin&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int[] localAges = new [] { 10, 20, 30 };
Find(p =&amp;gt; !localAges.Contains(p.Age));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $nin: [10, 20, 30] } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logical:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Logical&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/#logical
&#34;&gt;MongoDB documentation&lt;/a&gt; for more information on each operator.&lt;/p&gt;

&lt;h4 id=&#34;or:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$or&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Name == &amp;quot;Jack&amp;quot; || p.Age == 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ $or: [{ Name: &#39;Jack&#39; }, { Age: 10 }] }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;and:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$and&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Name == &amp;quot;Jack&amp;quot; &amp;amp;&amp;amp; p.Age &amp;lt; 40);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Name: &#39;Jack&#39;, Age: { $lt: 40 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Age &amp;gt; 30 &amp;amp;&amp;amp; p.Age &amp;lt; 40);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Age: { $gt: 30, $lt: 40 }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(p =&amp;gt; p.Name != &amp;quot;Jack&amp;quot; &amp;amp;&amp;amp; p.Name != &amp;quot;Jim&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ $and: [{ Name: { $ne: &#39;Jack&#39; } }, { Name: { $ne: &#39;Jim&#39; } }] }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;not:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$not&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nor:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$nor&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;element:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Element&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/#element
&#34;&gt;MongoDB documentation&lt;/a&gt; for more information on each operator.&lt;/p&gt;

&lt;h4 id=&#34;exists:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$exists&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;type:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$type&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;evaluation:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Evaluation&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/#evaluation
&#34;&gt;MongoDB documentation&lt;/a&gt; for more information on each operator.&lt;/p&gt;

&lt;h4 id=&#34;mod:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$mod&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;regex:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$regex&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;text:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$text&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;where:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$where&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;geospatial:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Geospatial&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/#geospatial
&#34;&gt;MongoDB documentation&lt;/a&gt; for more information on each operator.&lt;/p&gt;

&lt;h4 id=&#34;geowithin:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$geoWithin&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;geointersects:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$geoIntersects&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;near:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$near&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nearsphere:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$nearSphere&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;geospatial-1:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;Geospatial&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/#array
&#34;&gt;MongoDB documentation&lt;/a&gt; for more information on each operator.&lt;/p&gt;

&lt;h4 id=&#34;all:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$all&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no example yet
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;elemmatch:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$elemMatch&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(x =&amp;gt; x.Pets.Any(p =&amp;gt; p.Name == &amp;quot;Fluffy&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ Pets: { $elemMatch: { Name: &#39;Fluffy&#39; } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(x =&amp;gt; x.FavoriteNumbers.Any(n =&amp;gt; n &amp;gt; 21));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ FavoriteNumbers: { $elemMatch: { { $gt: 21 } } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;size:ccf7e9e64ce1a51aa79e6eb1314d9467&#34;&gt;$size&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(x =&amp;gt; x.FavoriteNumbers.Length == 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ FavoriteNumbers: { $size: 3 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(x =&amp;gt; x.FavoriteNumbers.Length != 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ FavoriteNumbers: { $not: { $size: 3 } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(x =&amp;gt; x.FavoriteNumbers.Any());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ FavoriteNumbers: { $ne: null, $not: { $size: 0 } } }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Find(x =&amp;gt; x.FavoriteNumbers.Count() == 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ FavoriteNumbers: { $size: 3 } }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Handling Schema Changes</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/mapping/schema_changes/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/mapping/schema_changes/</guid>
      <description>

&lt;h2 id=&#34;handling-schema-changes:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;Handling Schema Changes&lt;/h2&gt;

&lt;p&gt;Just because MongoDB is schema-less does not mean that your code can handle a schema-less document. Most likely, if you are using a statically typed language like C# or VB.NET, then your code is not flexible and needs to be mapped to a known schema.&lt;/p&gt;

&lt;p&gt;There are a number of different ways that a schema can change from one version of your application to the next.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#a-member-has-been-added:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;A new member is added&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-member-has-been-removed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;A member is removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-member-has-been-renamed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;A member is renamed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-type-of-a-member-is-changed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;The type of a member is changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-representation-of-a-member-is-changed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;The representation of a member is changed&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How you handle these is up to you. There are two different strategies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write an upgrade script.&lt;/li&gt;
&lt;li&gt;Incrementally update your documents as they are used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The easiest strategy is to write an upgrade script. There is effectively no difference to this method between a relational database (SQL Server, Oracle) and MongoDB. Identify the documents that need to be changed and update them.&lt;/p&gt;

&lt;p&gt;Alternatively, and not supportable in most relational databases, is the incremental upgrade. The idea is that your documents get updated as they are used. Documents that are never used never get updated. Because of this, there are some definite pitfalls you will need to be aware of.&lt;/p&gt;

&lt;p&gt;First, queries against a schema where half the documents are version 1 and half the documents are version 2 could go awry. For instance, if you rename an element, then your query will need to test both the old element name and the new element name to get all the results.&lt;/p&gt;

&lt;p&gt;Second, any incremental upgrade code must stay in the code-base until all the documents have been upgraded. For instance, if there have been 3 versions of a document, [1, 2, and 3] and we remove the upgrade code from version 1 to version 2, any documents that still exist as version 1 are un-upgradeable.&lt;/p&gt;

&lt;h2 id=&#34;a-member-has-been-added:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;A Member Has Been Added&lt;/h2&gt;

&lt;p&gt;When a new member is added to an entity, there is nothing that needs to be done other than restarting the application if you are using the auto mapping features. If not, then you will manually need to map the member in the same way all the other members are getting mapped.&lt;/p&gt;

&lt;p&gt;Existing documents will not have this element and it will show up in your class with its default value. You can, of course, specify a default value.&lt;/p&gt;

&lt;h2 id=&#34;a-member-has-been-removed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;A Member Has Been Removed&lt;/h2&gt;

&lt;p&gt;When a member has been removed from am entity, it will continue to exist in the documents. The serializer will throw an exception when this element is seen because it doesn’t know what to do with it. See the sections on &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#supporting-extra-elements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;supporting extra elements&lt;/a&gt; and &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#ignoring-extra-elements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;ignoring extra elements&lt;/a&gt; for information on how to deal with this.&lt;/p&gt;

&lt;h2 id=&#34;a-member-has-been-renamed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;A Member Has Been Renamed&lt;/h2&gt;

&lt;p&gt;When a member has been renamed, it will exist in old documents with the old name and in new documents with the new name. The way to handle incremental upgrades for this rename would be to implement an &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#supporting-extra-elements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;ExtraElements&lt;/a&gt; member in conjunction with &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#issuportinitialize:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;ISupportInitialize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, let’s say that a class used to have a &lt;code&gt;Name&lt;/code&gt; property which has now been split into a &lt;code&gt;FirstName&lt;/code&gt; and a &lt;code&gt;LastName&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass : ISupportInitialize 
{
    public string FirstName { get; set; }
    public string LastName { get; set; }

    [BsonExtraElements]
    public IDictionary&amp;lt;string, object&amp;gt; ExtraElements { get; set; }

    void ISupportInitialize.BeginInit() 
    {
        // nothing to do at beginning
    }

    void ISupportInitialize.EndInit() 
    {
        object nameValue;
        if (!ExtraElements.TryGetValue(&amp;quot;Name&amp;quot;, out nameValue)) {
            return;
        }

        var name = (string)nameValue;

        // remove the Name element so that it doesn&#39;t get persisted back to the database
        ExtraElements.Remove(&amp;quot;Name&amp;quot;);

        // assuming all names are &amp;quot;First Last&amp;quot;
        var nameParts = name.Split(&#39; &#39;);

        FirstName = nameParts[0];
        LastName = nameParts[1];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-type-of-a-member-is-changed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;The Type of a Member Is Changed&lt;/h2&gt;

&lt;p&gt;If the .NET type is compatible with the old type (an integer is changed to a double), then everything will continue to work. Otherwise, a custom serializer or a migration script will be required.&lt;/p&gt;

&lt;h2 id=&#34;the-representation-of-a-member-is-changed:3d4bdfa14ec4eda85bd3b08b8c601569&#34;&gt;The Representation of a Member Is Changed&lt;/h2&gt;

&lt;p&gt;If the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#representation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;representation of a member&lt;/a&gt; is changed and the representations are compatible, then everything will continue to work. Otherwise, a custom serializer or a migration script will be required.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapping Classes</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/mapping/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/mapping/</guid>
      <description>

&lt;h2 id=&#34;mapping-classes:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Mapping Classes&lt;/h2&gt;

&lt;p&gt;Using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; will work when a schema is fluid and dynamic. However, most applications are built with a schema modeled in the application itself rather than the database. In these cases, it is likely that the application uses classes.&lt;/p&gt;

&lt;p&gt;The .NET BSON library supports mapping these classes to and from BSON/JSON using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_BsonClassMap_1.htm
&#34;&gt;&lt;code&gt;BsonClassMap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-class-map:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Creating a Class Map&lt;/h2&gt;

&lt;p&gt;In a majority of cases, the driver will be able to automatically map your class for you. This will happen if you begin to use a class for which no &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/serialization/#serializers:9f7e4d8b174e71a2ac5d4d28c9548f5c&#34;&gt;serializer&lt;/a&gt; has yet been registered in the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/serialization/#serializer-registry:9f7e4d8b174e71a2ac5d4d28c9548f5c&#34;&gt;serializer registry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can choose to register the class map using the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_Serialization_BsonClassMap_RegisterClassMap__1_1.htm
&#34;&gt;&lt;code&gt;RegisterClassMap&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
It is very important that the registration of class maps occur prior to them being needed. The best place to register them is at app startup prior to initializing a connection with MongoDB.
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you want to control the creation of the class map, you can provide your own initialization code in the form of a lambda expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.MapMember(c =&amp;gt; c.SomeProperty);
    cm.MapMember(c =&amp;gt; c.AnotherProperty);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When your lambda expression is executed, the &lt;code&gt;cm&lt;/code&gt; (short for class map) parameter is passed an empty class map for you to fill in. In this example, two properties are added to the class map by calling the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_Serialization_BsonClassMap_1_MapMember__1.htm
&#34;&gt;&lt;code&gt;MapMember&lt;/code&gt;&lt;/a&gt; method. The arguments to the method are themselves lambda expressions which identify the member of the class. The advantage of using a lambda expression instead of just a string parameter with the name of the property is that Intellisense and compile time checking ensure that you can’t misspell the name of the property.&lt;/p&gt;

&lt;h2 id=&#34;automap:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;AutoMap&lt;/h2&gt;

&lt;p&gt;It is also possible to use automapping and then override some of the results using the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_Serialization_BsonClassMap_AutoMap.htm
&#34;&gt;&lt;code&gt;AutoMap&lt;/code&gt;&lt;/a&gt; method. This method should be called first in the lambda expression.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.SomeProperty);
    cm.MapMember(c =&amp;gt; c.AnotherProperty);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_Serialization_BsonClassMap_AutoMap.htm
&#34;&gt;&lt;code&gt;AutoMap&lt;/code&gt;&lt;/a&gt; uses conventions to map the class and its members. See the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/conventions/&#34;&gt;convention documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&#34;class-customization:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Class Customization&lt;/h2&gt;

&lt;p&gt;There are several serialization options that are related to the class itself instead of to any particular field or property. You can set these class level options either by decorating the class with serialization related attributes or by writing initialization code.&lt;/p&gt;

&lt;h3 id=&#34;ignoring-extra-elements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Ignoring Extra Elements&lt;/h3&gt;

&lt;p&gt;When a BSON document is deserialized, the name of each element is used to look up a matching member in the class map. Normally, if no matching member is found, an exception will be thrown. If you want to ignore extra elements during deserialization, use a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonIgnoreExtraElementsAttribute.htm
&#34;&gt;&lt;code&gt;BsonIgnoreExtraElementsAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[BsonIgnoreExtraElements]
public MyClass 
{
    // fields and properties
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.SetIgnoreExtraElements(true);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
When you ignore extra elements, if the class is rendered back to BSON, those extra elements will not exist and may be lost forever.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;supporting-extra-elements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Supporting Extra Elements&lt;/h3&gt;

&lt;p&gt;You can design your class to be capable of handling any extra elements that might be found in a BSON document during deserialization. To do so, you must have a property of type &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_BsonDocument.htm
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/s4ys34ea.aspx&#34;&gt;&lt;code&gt;IDictionary&amp;lt;string, object&amp;gt;&lt;/code&gt;&lt;/a&gt;) and you must identify that property as the one that should hold any extra elements that are found. By &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/conventions/&#34;&gt;convention&lt;/a&gt;, the member may be named &lt;code&gt;ExtraElements&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public MyClass 
{
    // fields and properties
    [BsonExtraElements]
    public BsonDocument CatchAll { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapExtraElementsMember(c =&amp;gt; c.CatchAll);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a BSON document is deserialized, any extra elements found will be stored in the extra elements property. When the class is serialized, the extra elements will be serialized also. One thing to note though is that the serialized class will probably not have the elements in exactly the same order as the original document. All extra elements will be serialized together when the extra elements member is serialized.&lt;/p&gt;

&lt;h3 id=&#34;discriminators:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Discriminators&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/polymorphism/&#34;&gt;polymorphism&lt;/a&gt; section for documentation on discriminators and polymorphism.&lt;/p&gt;

&lt;p&gt;To specify a discriminator, use a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonDiscriminatorAttribute.htm
&#34;&gt;&lt;code&gt;BsonDiscriminatorAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[BsonDiscriminator(&amp;quot;myclass&amp;quot;)]
public MyClass 
{
    // fields and properties
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.SetDiscriminator(&amp;quot;myclass&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;isupportinitialize:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;ISupportInitialize&lt;/h3&gt;

&lt;p&gt;If your class implements &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.componentmodel.isupportinitialize.aspx&#34;&gt;&lt;code&gt;ISupportInitialize&lt;/code&gt;&lt;/a&gt;, the driver will call the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.componentmodel.isupportinitialize.begininit.aspx&#34;&gt;&lt;code&gt;BeginInit&lt;/code&gt;&lt;/a&gt; method before deserialization and the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.componentmodel.isupportinitialize.endinit.aspx&#34;&gt;&lt;code&gt;EndInit&lt;/code&gt;&lt;/a&gt; method upon completion. It is useful for running operations before or after deserialization such as handling schema changes are pre-calculating some expensive operations.&lt;/p&gt;

&lt;h2 id=&#34;creation-customization:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Creation Customization&lt;/h2&gt;

&lt;p&gt;By default, classes must contain a no-argument constructor that will be used to instantiate the class to rehydrate. However, it is possible to configure a constructor whose arguments are correlated with mapped properties or fields. There are a couple of ways to do this.&lt;/p&gt;

&lt;p&gt;Using an expression, you can instruct the driver to use a creator map as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Person
{
    public string FirstName { get; private set; }
    public string LastName { get; private set; }

    public Person(string firstName, string lastName)
    {
        FirstName = firstName;
        LastName = lastName;
    }
}

// snip...

BsonClassMap.RegisterClassMap&amp;lt;Person&amp;gt;(cm =&amp;gt;
{
    cm.AutoMap();
    cm.MapCreator(p =&amp;gt; new Person(p.FirstName, p.LastName));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parsing the expression tree correlates the first constructor argument with the FirstName property and the second constructor argument with the LastName property. There are other, more complicated ways of handling this which can be explored on your own should the need arise.&lt;/p&gt;

&lt;p&gt;Using attributes instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }

    [BsonConstructor]
    public Person(string firstName, string lastName)
    {
        FirstName = firstName;
        LastName = lastName;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, a convention runs on every CreatorMap with no mapped arguments and attempts to correlate the names of the constructor arguments with the names of mapped members. If your names differ in more than just case, there are overloads of BsonConstructor which can be used to explicity tell the driver which members to use.&lt;/p&gt;

&lt;p&gt;When more than one constructor is found, we will use the constructor that has the most matching parameters. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public DateTime? BirthDate { get; set; }

    [BsonConstructor]
    public Person(string firstName, string lastName)
    {
        // snip...
    }

    [BsonConstructor]
    public Person(string firstName, string lastName, DateTime birthDate)
    {
        // snip...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the document in the database has a BirthDate element, we will choose to use the constructor with three parameters because it is more specific.&lt;/p&gt;

&lt;h2 id=&#34;member-customization:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Member Customization&lt;/h2&gt;

&lt;p&gt;You can also control serialization at the individual class or field or property level using code to configure the class and member maps or using attributes to decorate the class and members. For each aspect of serialization you can control, we will be showing both ways.&lt;/p&gt;

&lt;h3 id=&#34;opt-in:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Opt-In&lt;/h3&gt;

&lt;p&gt;A majority of classes will have their members &lt;a href=&#34;#automap:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;mapped automatically&lt;/a&gt;. There are some circumstances where this does not happen. For instance, if your property is read-only, it will not get included in the automapping of a class by default. In order to include the member, you can use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonElementAttribute.htm
&#34;&gt;&lt;code&gt;BsonElementAttribute&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class MyClass
{
    private readonly string _someProperty;

    [BsonElement]
    public string SomeProperty
    {
        get { return _someProperty; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapProperty(c =&amp;gt; c.SomeProperty);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
When a readonly property is serialized, it value is persisted to the database, but never read back out. This is useful for storing “computed” properties.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;element-name:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Element Name&lt;/h3&gt;

&lt;p&gt;To specify an element name using attributes, write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonElement(&amp;quot;sp&amp;quot;)]
    public string SomeProperty { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.SomeProperty).SetElementName(&amp;quot;sp&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;element-order:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Element Order&lt;/h3&gt;

&lt;p&gt;If you want precise control over the order of the elements in the BSON document, you can use the Order named parameter to the BsonElement attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonElement(&amp;quot;sp&amp;quot;, Order = 1)]
    public string SomeProperty { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.SomeProperty).SetElementName(&amp;quot;sp&amp;quot;).SetOrder(1);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any fields or properties that do not have an explicit Order will occur after those that do have an Order.&lt;/p&gt;

&lt;h3 id=&#34;the-id-member:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;The Id Member&lt;/h3&gt;

&lt;p&gt;By &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/conventions/&#34;&gt;convention&lt;/a&gt;, a public member called &lt;code&gt;Id&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, or &lt;code&gt;_id&lt;/code&gt; will be used as the identifier. You can be specific about this using the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonIdAttribute.htm
&#34;&gt;&lt;code&gt;BsonIdAttribute&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonId]
    public string SomeProperty { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapIdMember(c =&amp;gt; c.SomeProperty);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;id-generators:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Id Generators&lt;/h4&gt;

&lt;p&gt;When you Insert a document, the driver checks to see if the &lt;code&gt;Id&lt;/code&gt; member has been assigned a value and, if not, generates a new unique value for it. Since the &lt;code&gt;Id&lt;/code&gt; member can be of any type, the driver requires the help of an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IIdGenerator.htm
&#34;&gt;&lt;code&gt;IIdGenerator&lt;/code&gt;&lt;/a&gt; to check whether the &lt;code&gt;Id&lt;/code&gt; has a value assigned to it and to generate a new value if necessary. The driver has the following Id generators built-in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_ObjectIdGenerator.htm
&#34;&gt;&lt;code&gt;ObjectIdGenerator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_StringObjectIdGenerator.htm
&#34;&gt;&lt;code&gt;StringObjectIdGenerator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_GuidGenerator.htm
&#34;&gt;&lt;code&gt;GuidGenerator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_CombGuidGenerator.htm
&#34;&gt;&lt;code&gt;CombGuidGenerator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_NullIdChecker.htm
&#34;&gt;&lt;code&gt;NullIdChecker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_ZeroIdChecker_1.htm
&#34;&gt;&lt;code&gt;ZeroIdChecker&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_BsonObjectIdGenerator.htm
&#34;&gt;&lt;code&gt;BsonObjectIdGenerator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these Id generators are used automatically for commonly used &lt;code&gt;Id&lt;/code&gt; types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_GuidGenerator.htm
&#34;&gt;&lt;code&gt;GuidGenerator&lt;/code&gt;&lt;/a&gt; is used for a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.guid.aspx&#34;&gt;&lt;code&gt;Guid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_ObjectIdGenerator.htm
&#34;&gt;&lt;code&gt;ObjectIdGenerator&lt;/code&gt;&lt;/a&gt; is used for an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_ObjectId.htm
&#34;&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_StringObjectIdGenerator.htm
&#34;&gt;&lt;code&gt;StringObjectIdGenerator&lt;/code&gt;&lt;/a&gt; is used for a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.string.aspx&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt; represented externally as &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_ObjectId.htm
&#34;&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To specify the Id generator via an attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonId(IdGenerator = typeof(CombGuidGenerator))]
    public Guid Id { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapIdMember(c =&amp;gt; c.Id).SetIdGenerator(CombGuidGenerator.Instance);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also say that you want to use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IdGenerators_CombGuidGenerator.htm
&#34;&gt;&lt;code&gt;CombGuidGenerator&lt;/code&gt;&lt;/a&gt; for all Guids.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonSerializer.RegisterIdGenerator(
    typeof(Guid),
    CombGuidGenerator.Instance
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ignoring-a-member:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Ignoring a Member&lt;/h3&gt;

&lt;p&gt;When constructing a class map manually, you can ignore a field or property simply by not adding it to the class map. When using AutoMap, you need a way to specify that a field or property should be ignored. Use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonIgnoreAttribute.htm
&#34;&gt;&lt;code&gt;BsonIgnoreAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonIgnore]
    public string SomeProperty { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.UnmapMember(c =&amp;gt; c.SomeProperty);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using code, &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_Serialization_BsonClassMap_AutoMap.htm
&#34;&gt;&lt;code&gt;AutoMap&lt;/code&gt;&lt;/a&gt; will have initially added the property to the class map automatically. &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_Serialization_BsonClassMap_1_UnmapMember__1.htm
&#34;&gt;&lt;code&gt;UnmapMember&lt;/code&gt;&lt;/a&gt; will remove it.&lt;/p&gt;

&lt;h3 id=&#34;ignoring-default-values:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Ignoring Default Values&lt;/h3&gt;

&lt;p&gt;By default, default values are serialized to the BSON document. An alternative is to serialize nothing to the BSON document when the member has a default value. For reference types, this value is &lt;code&gt;null&lt;/code&gt; and for value types, the default is whatever the default is for the value type. Use a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonIgnoreIfDefaultAttribute.htm
&#34;&gt;&lt;code&gt;BsonIgnoreIfDefaultAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonIgnoreIfDefault]
    public string SomeProperty { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.SomeProperty).SetIgnoreIfDefault(true);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;specifying-the-default-value:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Specifying the Default Value&lt;/h3&gt;

&lt;p&gt;You can specify a default value for a member using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonDefaultValueAttribute.htm
&#34;&gt;&lt;code&gt;BsonDefaultValueAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonDefaultValue(&amp;quot;abc&amp;quot;)]
    public string SomeProperty { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.SomeProperty).SetDefaultValue(&amp;quot;abc&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default value and the ignoring of a default value work together. The following will serialize a &lt;code&gt;null&lt;/code&gt; value, but not &lt;code&gt;abc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonIgnoreIfDefault]
    [BsonDefaultValue(&amp;quot;abc&amp;quot;)]
    public string SomeProperty { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ignoring-a-member-at-runtime:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Ignoring a Member at Runtime&lt;/h3&gt;

&lt;p&gt;Sometimes the decision whether to serialize a member or not is more complicated than just whether the value is &lt;code&gt;null&lt;/code&gt; or equal to the default value. In these cases, you can write a method that determines whether a value should be serialized. Usually the method for member Xyz is named ShouldSerializeXyz. If you follow this naming convention then &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Bson_Serialization_BsonClassMap_AutoMap.htm
&#34;&gt;&lt;code&gt;AutoMap&lt;/code&gt;&lt;/a&gt; will automatically detect the method and use it. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Employee 
{
    public ObjectId Id { get; set; }

    [BsonDateTimeOptions(DateOnly = true)]
    public DateTime DateOfBirth { get; set; }

    public bool ShouldSerializeDateOfBirth() 
    {
        return DateOfBirth &amp;gt; new DateTime(1900, 1, 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using code, it can be specified as a lambda expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;Employee&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.DateOfBirth).SetShouldSerializeMethod(
        obj =&amp;gt; ((Employee) obj).DateOfBirth &amp;gt; new DateTime(1900, 1, 1)
    );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;specifying-the-serializer:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Specifying the Serializer&lt;/h3&gt;

&lt;p&gt;There are times when a specific serializer needs to be used rather than letting the BSON library choose. This can be done using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonSerializerAttribute.htm
&#34;&gt;&lt;code&gt;BsonSerializerAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    public ObjectId Id { get; set; }

    [BsonSerializer(typeof(MyCustomStringSerializer))]
    public string X { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.X).SetSerializer(new MyCustomStringSerializer());
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;serialization-options:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Serialization Options&lt;/h3&gt;

&lt;p&gt;Serialization of some classes can be more finely controlled using serialization options. Whether a class uses serialization options or not, and which ones, depends on the particular class involved. The following sections describe the available serialization option classes and the classes that use them.&lt;/p&gt;

&lt;h4 id=&#34;datetime-serialization-options:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;DateTime Serialization Options&lt;/h4&gt;

&lt;p&gt;Using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonDateTimeOptionsAttribute.htm
&#34;&gt;&lt;code&gt;BsonDateTimeOptionsAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonDateTimeOptions(DateOnly = true)]
    public DateTime DateOfBirth { get; set; }

    [BsonDateTimeOptions(Kind = DateTimeKind.Local)]
    public DateTime AppointmentTime { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When done via code, a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Serializers_DateTimeSerializer.htm
&#34;&gt;&lt;code&gt;DateTimeSerializer&lt;/code&gt;&lt;/a&gt; should be set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.DateOfBirth).SetSerializer(new DateTimeSerializer(dateOnly: true));
    cm.MapMember(c =&amp;gt; c.AppointmentTime).SetSerializer(new DateTimeSerializer(DateTimeKind.Local));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are specifying that the &lt;code&gt;DateOfBirth&lt;/code&gt; value holds a date only (so the TimeOfDay component will be zero). Additionally, because this is a date only, no timezone conversions at all will be performed. The &lt;code&gt;AppointmentTime&lt;/code&gt; value is in local time and will be converted to UTC when it is serialized and converted back to local time when it is deserialized.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
DateTime values in MongoDB are always saved as UTC.
&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;dictionary-serialization-options:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Dictionary Serialization Options&lt;/h4&gt;

&lt;p&gt;When serializing dictionaries, there are several alternative ways that the contents of the dictionary can be represented. The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Options_DictionaryRepresentation.htm
&#34;&gt;&lt;code&gt;DictionaryRepresentation&lt;/code&gt;&lt;/a&gt; enum indicates the supported methods. Using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonDictionaryOptionsAttribute.htm
&#34;&gt;&lt;code&gt;BsonDictionaryOptionsAttribute&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class C 
{
    public ObjectId Id;
   
    [BsonDictionaryOptions(DictionaryRepresentation.ArrayOfDocuments)]
    public Dictionary&amp;lt;string, int&amp;gt; Values;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When done via code, a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Serializers_DictionaryInterfaceImplementerSerializer_1.htm
&#34;&gt;&lt;code&gt;DictionaryInterfaceImplementerSerializer&lt;/code&gt;&lt;/a&gt; should be set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;C&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.MapMember(c =&amp;gt; c.Values).SetSerializer(new DictionaryInterfaceImplementerSerializer&amp;lt;Dictionary&amp;lt;string, int&amp;gt;&amp;gt;(DictionaryRepresentation.ArrayOfDocuments));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The 3 options in the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Options_DictionaryRepresentation.htm
&#34;&gt;&lt;code&gt;DictionaryRepresentation&lt;/code&gt;&lt;/a&gt; enum are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Document&lt;/code&gt;: A dictionary represented as a Document will be stored as a BsonDocument, and each entry in the dictionary will be represented by a BsonElement with the name equal to the key of the dictionary entry and the value equal to the value of the dictionary entry. This representation can only be used when all the keys in a dictionary are strings that are valid element names.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ArrayOfArrays&lt;/code&gt;: A dictionary represented as an ArrayOfArrays will be stored as a BsonArray of key/value pairs, where each key/value pair is stored as a nested two-element BsonArray where the two elements are the key and the value of the dictionary entry. This representation can be used even when the keys of the dictionary are not strings. This representation is very general and compact, and is the default representation when Document does not apply. One problem with this representation is that it is difficult to write queries against it, which motivated the introduction in the 1.2 version of the driver of the ArrayOfDocuments representation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ArrayOfDocuments&lt;/code&gt;: A dictionary represented as an ArrayOfDocuments will be stored as a BsonArray of key/value pairs, where each key/value pair is stored as a nested two-element BsonDocument of the form { k : key, v : value }. This representation is just as general as the ArrayOfArrays representation, but because the keys and values are tagged with element names it is much easier to write queries against it. For backward compatibility reasons this is not the default representation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;representation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Representation&lt;/h3&gt;

&lt;p&gt;For some .NET primitive types you can control what BSON type you want used to represent the value. For example, you can specify whether a char value should be represented as a BSON Int32 or as a one-character BSON String:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass 
{
    [BsonRepresentation(BsonType.Int32)]
    public char RepresentAsInt32 { get; set; }

    [BsonRepresentation(BsonType.String)]
    public char RepresentAsString { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.GetMemberMap(c =&amp;gt; c.RepresentAsInt32).SetRepresentation(BsonType.Int32);
    cm.GetMemberMap(c =&amp;gt; c.RepresentAsString).SetRepresentation(BsonType.String);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One case that deserves special mention is representing a string externally as an ObjectId. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Employee 
{
    [BsonRepresentation(BsonType.ObjectId)]
    public string Id { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the serializer will convert the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_ObjectId.htm
&#34;&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/a&gt; to a &lt;code&gt;string&lt;/code&gt; when reading data from the database and will convert the &lt;code&gt;string&lt;/code&gt; back to an &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_ObjectId.htm
&#34;&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/a&gt; when writing data to the database (the &lt;code&gt;string&lt;/code&gt; value must be a valid &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_ObjectId.htm
&#34;&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/a&gt;). Typically this is done when you want to keep your domain classes free of any dependencies on the driver. To keep your domain classes free of dependencies on the C# driver you also won’t want to use attributes, so you can accomplish the same thing using initialization code instead of attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;Employee&amp;gt;(cm =&amp;gt; 
{
    cm.AutoMap();
    cm.IdMemberMap.SetRepresentation(BsonType.ObjectId);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-attributes:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Custom Attributes&lt;/h2&gt;

&lt;p&gt;It is possible to implement custom attributes to contribute to the serialization infrastructure. There are 3 interfaces you might want to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IBsonClassMapAttribute.htm
&#34;&gt;&lt;code&gt;IBsonClassMapAttribute&lt;/code&gt;&lt;/a&gt; is used to contribute to a class map.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IBsonMemberMapAttribute.htm
&#34;&gt;&lt;code&gt;IBsonMemberMapAttribute&lt;/code&gt;&lt;/a&gt; is used to contribute to a member map.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_IBsonCreatorMapAttribute.htm
&#34;&gt;&lt;code&gt;IBsonCreatorMapAttribute&lt;/code&gt;&lt;/a&gt; is used to contribute to a creator map.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the provided attributes implement one or more of these interfaces, so they are good examples of how these interfaces function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Polymorphism</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/mapping/polymorphism/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/mapping/polymorphism/</guid>
      <description>

&lt;h2 id=&#34;polymorphism:33907bf0ce2b8b3d8128c36b8bb881d4&#34;&gt;Polymorphism&lt;/h2&gt;

&lt;p&gt;When you have a class hierarchy and will be serializing instances of varying classes to the same collection you need a way to distinguish one from another. The normal way to do so is to write some kind of special value (called a “discriminator”) in the document along with the rest of the elements that you can later look at to tell them apart. Since there are potentially many ways you could discriminate between actual types, the default serializer uses conventions for discriminators. The default serializer provides two standard discriminators: &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_ScalarDiscriminatorConvention.htm
&#34;&gt;&lt;code&gt;ScalarDiscriminatorConvention&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_HierarchicalDiscriminatorConvention.htm
&#34;&gt;&lt;code&gt;HierarchicalDiscriminatorConvention&lt;/code&gt;&lt;/a&gt;. The default is the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_HierarchicalDiscriminatorConvention.htm
&#34;&gt;&lt;code&gt;HierarchicalDiscriminatorConvention&lt;/code&gt;&lt;/a&gt;, but it behaves just like the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_ScalarDiscriminatorConvention.htm
&#34;&gt;&lt;code&gt;ScalarDiscriminatorConvention&lt;/code&gt;&lt;/a&gt; until certain options are set to trigger its hierarchical behavior.&lt;/p&gt;

&lt;p&gt;The default discriminator conventions both use an element named _t to store the discriminator value in the BSON document. This element will normally be the second element in the BSON document (right after the _id). In the case of the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_ScalarDiscriminatorConvention.htm
&#34;&gt;&lt;code&gt;ScalarDiscriminatorConvention&lt;/code&gt;&lt;/a&gt;, the value of _t will be a single string. In the case of the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_HierarchicalDiscriminatorConvention.htm
&#34;&gt;&lt;code&gt;HierarchicalDiscriminatorConvention&lt;/code&gt;&lt;/a&gt; the value of _t will be an array of discriminator values, one for each level of the class inheritance tree.&lt;/p&gt;

&lt;p&gt;While you will normally be just fine with the default discriminator convention, you might have to write a custom discriminator convention if you must work with data written by another driver or object mapper that uses a different convention for its discriminators.&lt;/p&gt;

&lt;h2 id=&#34;setting-the-discriminator-value:33907bf0ce2b8b3d8128c36b8bb881d4&#34;&gt;Setting the Discriminator Value&lt;/h2&gt;

&lt;p&gt;The default value for the discriminator is the name of the class (without the namespace part). You can specify a different value using attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[BsonDiscriminator(&amp;quot;myclass&amp;quot;)]
public MyClass {
    // fields and properties
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;MyClass&amp;gt;(cm =&amp;gt; {
    cm.AutoMap();
    cm.SetDiscriminator(&amp;quot;myclass&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;specifying-known-types:33907bf0ce2b8b3d8128c36b8bb881d4&#34;&gt;Specifying Known Types&lt;/h2&gt;

&lt;p&gt;When deserializing polymorphic classes, it is important that the serializer know about all the classes in the hierarchy before deserialization begins. If you ever see an error message about an “Unknown discriminator”, it is because the deserializer can’t figure out the class for that discriminator. If you are mapping your classes programmatically simply make sure that all classes in the hierarchy have been mapped before beginning deserialization. When using attributes and &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#automap:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;automapping&lt;/a&gt;, you will need to inform the serializer about known types (i.e. subclasses) it should create class maps for. Here is an example of how to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[BsonKnownTypes(typeof(Cat), typeof(Dog)]
public class Animal 
{
}

[BsonKnownTypes(typeof(Lion), typeof(Tiger)]
public class Cat : Animal 
{
}

public class Dog : Animal 
{
}

public class Lion : Cat 
{
}

public class Tiger : Cat 
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonKnownTypesAttribute.htm
&#34;&gt;&lt;code&gt;BsonKnownTypesAttribute&lt;/code&gt;&lt;/a&gt; attribute lets the serializer know what subclasses it might encounter during deserialization, so when &lt;code&gt;Animal&lt;/code&gt; is &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#automap:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;automapped&lt;/a&gt;, the serializer will also &lt;a href=&#34;/mongo-csharp-driver/2.0/mongo-csharp-driver/2.0/reference/bson/mapping/#automap:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;automap&lt;/a&gt; &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;Dog&lt;/code&gt;, and recursively, &lt;code&gt;Lion&lt;/code&gt; and &lt;code&gt;Tiger&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;Animal&amp;gt;();
BsonClassMap.RegisterClassMap&amp;lt;Cat&amp;gt;();
BsonClassMap.RegisterClassMap&amp;lt;Dog&amp;gt;();
BsonClassMap.RegisterClassMap&amp;lt;Lion&amp;gt;();
BsonClassMap.RegisterClassMap&amp;lt;Tiger&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scalar-and-hierarchical-discriminators:33907bf0ce2b8b3d8128c36b8bb881d4&#34;&gt;Scalar and Hierarchical Discriminators&lt;/h2&gt;

&lt;p&gt;Normally a discriminator is simply the name of the class (although it could be different if you are using a custom discriminator convention or have explicitly specified a discriminator for a class). So a collection containing a mix of different type of Animal documents might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ _id: ..., _t: &amp;quot;Animal&amp;quot;, ... }
{ _id: ..., _t: &amp;quot;Cat&amp;quot;, ... }
{ _id: ..., _t: &amp;quot;Dog&amp;quot;, ... }
{ _id: ..., _t: &amp;quot;Lion&amp;quot;, ... }
{ _id: ..., _t: &amp;quot;Tiger&amp;quot;, ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes it can be helpful to record a hierarchy of discriminator values, one for each level of the hierarchy. To do this, you must first mark a base class as being the root of a hierarchy, and then the default &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Conventions_HierarchicalDiscriminatorConvention.htm
&#34;&gt;&lt;code&gt;HierarchicalDiscriminatorConvention&lt;/code&gt;&lt;/a&gt; will automatically record discriminators as array values instead.&lt;/p&gt;

&lt;p&gt;To identify &lt;code&gt;Animal&lt;/code&gt; as the root of a hierarchy use the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_Serialization_Attributes_BsonDiscriminatorAttribute.htm
&#34;&gt;&lt;code&gt;BsonDiscriminatorAttribute&lt;/code&gt;&lt;/a&gt; attribute with the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/P_MongoDB_Bson_Serialization_Attributes_BsonDiscriminatorAttribute_RootClass.htm
&#34;&gt;&lt;code&gt;RootClass&lt;/code&gt;&lt;/a&gt; named parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[BsonDiscriminator(RootClass = true)]
[BsonKnownTypes(typeof(Cat), typeof(Dog)]
public class Animal 
{
}

// the rest of the hierarchy as before
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BsonClassMap.RegisterClassMap&amp;lt;Animal&amp;gt;(cm =&amp;gt; {
    cm.AutoMap();
    cm.SetIsRootClass(true);
});
BsonClassMap.RegisterClassMap&amp;lt;Cat&amp;gt;();
BsonClassMap.RegisterClassMap&amp;lt;Dog&amp;gt;();
BsonClassMap.RegisterClassMap&amp;lt;Lion&amp;gt;();
BsonClassMap.RegisterClassMap&amp;lt;Tiger&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you have identified Animal as a root class, the discriminator values will look a little bit different:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ _id: ..., _t: &amp;quot;Animal&amp;quot;, ... }
{ _id: ..., _t: [&amp;quot;Animal&amp;quot;, &amp;quot;Cat&amp;quot;], ... }
{ _id: ..., _t: [&amp;quot;Animal&amp;quot;, &amp;quot;Dog&amp;quot;], ... }
{ _id: ..., _t: [&amp;quot;Animal&amp;quot;, &amp;quot;Cat&amp;quot;, &amp;quot;Lion&amp;quot;], ... }
{ _id: ..., _t: [&amp;quot;Animal&amp;quot;, &amp;quot;Cat&amp;quot;, &amp;quot;Tiger&amp;quot;], ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main reason you might choose to use hierarchical discriminators is because it makes it possibly to query for all instances of any class in the hierarchy. For example, to read all the &lt;code&gt;Cat&lt;/code&gt; documents we can use the following filter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var filter = new BsonDocument(&amp;quot;_t&amp;quot;, &amp;quot;Cat&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reading</title>
      <link>/mongo-csharp-driver/2.0/reference/driver/crud/reading/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/driver/crud/reading/</guid>
      <description>

&lt;h2 id=&#34;counting-documents:529984d900619d993d91589767da4ddb&#34;&gt;Counting Documents&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollection_1_CountAsync.htm
&#34;&gt;&lt;code&gt;CountAsync&lt;/code&gt;&lt;/a&gt; method can be used to count all the documents matching a particular filter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var count = await collection.CountAsync(new BsonDocument(&amp;quot;x&amp;quot;, 10));

// or

var count = await collection.CountAsync(x =&amp;gt; x.Age &amp;gt; 20);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Counting all the documents in a collection requires an empty filter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var count = await collection.CountAsync(new BsonDocument());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;finding-documents:529984d900619d993d91589767da4ddb&#34;&gt;Finding Documents&lt;/h2&gt;

&lt;p&gt;Finding all the documents in a collection is done with an empty filter and the method &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/M_MongoDB_Driver_IMongoCollectionExtensions_Find__1.htm
&#34;&gt;&lt;code&gt;Find&lt;/code&gt;&lt;/a&gt;. Once we have a cursor (of type &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_IAsyncCursor_1.htm
&#34;&gt;&lt;code&gt;IAsyncCursor&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;), we can iterate it like we manually iterate an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/9eekhta0.aspx&#34;&gt;&lt;code&gt;IEnumerable&amp;lt;TDocument&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var filter = new BsonDocument();
using (var cursor = await collection.Find(filter).ToCursorAsync())
{
    while (await cursor.MoveNextAsync())
    {
        foreach (var doc in cursor.Current)
        {
            // do something with the documents
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
It is imperative that the cursor get disposed once you are finished with it to ensure that resources on the server are cleaned up.
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Some options are available in the optional &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Driver_FindOptions.htm
&#34;&gt;&lt;code&gt;FindOptions&lt;/code&gt;&lt;/a&gt; parameter such as setting maxTimeMS, a batch size, or a comment. Others are available as part of the fluent interface such as skip, limit, and sort.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var filter = new BsonDocument();
var options = new FindOptions
{
    MaxTime = TimeSpan.FromMilliseconds(20)
};
using (var cursor = await collection.Find(filter, options).Skip(10).Limit(20).ToCursorAsync())
{
    // etc...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
The order of the chained methods is unimportant. Limit followed by Skip is the same as Skip followed by Limit. In addition, specifying a method multiple times will result in the last one winning.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;iteration:529984d900619d993d91589767da4ddb&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Other methods of iteration besides using a cursor directly are available.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;ToListAsync&lt;/code&gt; is available. This is useful when the list will be small or you simply need them all as a list. If you are returning a large number of documents, then memory should be considered a factor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var list = await collection.Find(filter)
    .Skip(10)
    .ToListAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, &lt;code&gt;ForEachAsync&lt;/code&gt; is available. This method is useful when you just need to process each document and don&amp;rsquo;t need to keep them around.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await collection.Find(filter)
    .Skip(10)
    .ForEachAsync(doc =&amp;gt; Console.WriteLine(doc));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To avoid blocking while processing each document you can use an async lambda:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await collection.Find(filter)
    .Skip(10)
    .ForEachAsync(async (doc) =&amp;gt; await Console.WriteLineAsync(doc));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
These iteration methods don&amp;rsquo;t require you to dispose of the cursor. That will be handled for you automatically.
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;single-results:529984d900619d993d91589767da4ddb&#34;&gt;Single Results&lt;/h3&gt;

&lt;p&gt;When you only want to find one document, the &lt;code&gt;FirstAsync&lt;/code&gt;, &lt;code&gt;FirstOrDefaultAsync&lt;/code&gt;, &lt;code&gt;SingleAsync&lt;/code&gt;, and &lt;code&gt;SingleOrDefaultAsync&lt;/code&gt; methods are available.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = await collection.Find(filter)
    .Skip(10)
    .FirstOrDefaultAsync();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reading and Writing BSON/JSON</title>
      <link>/mongo-csharp-driver/2.0/reference/bson/bson/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-csharp-driver/2.0/reference/bson/bson/</guid>
      <description>

&lt;h2 id=&#34;reading:9a3f4a06c5e6703b45401d6d4a0f6eef&#34;&gt;Reading&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_IBsonReader.htm
&#34;&gt;&lt;code&gt;IBsonReader&lt;/code&gt;&lt;/a&gt; interface contains all the methods necessary to read a &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt; document or a &lt;a href=&#34;http://json.org&#34;&gt;JSON&lt;/a&gt; document. There is an implementation for each format.&lt;/p&gt;

&lt;h3 id=&#34;bson:9a3f4a06c5e6703b45401d6d4a0f6eef&#34;&gt;BSON&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_BsonBinaryReader.htm
&#34;&gt;&lt;code&gt;BsonBinaryReader&lt;/code&gt;&lt;/a&gt; is for reading binary BSON. For example, to read a BSON file containing the document &lt;code&gt;{ a: 1 }&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string inputFileName; // initialize to a file containing BSON

using (var stream = File.OpenRead(inputFileName))
using (var reader = new BsonBinaryReader(stream))
{
    reader.ReadStartDocument();
    string fieldName = reader.ReadName();
    int value = reader.ReadInt32();
    reader.ReadEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;json:9a3f4a06c5e6703b45401d6d4a0f6eef&#34;&gt;JSON&lt;/h3&gt;

&lt;p&gt;In the same way, we can read a JSON string using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonReader.htm
&#34;&gt;&lt;code&gt;JsonReader&lt;/code&gt;&lt;/a&gt;. For example, to read the document &lt;code&gt;{ a: 1 }&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var jsonString = &amp;quot;{ a: 1 }&amp;quot;;
using (var reader = new JsonReader(jsonString))
{
    reader.ReadStartDocument();
    string fieldName = reader.ReadName();
    int value = reader.ReadInt32();
    reader.ReadEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonReader.htm
&#34;&gt;&lt;code&gt;JsonReader&lt;/code&gt;&lt;/a&gt; supports reading strict JSON as well as both flavors of &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/
&#34;&gt;MongoDB Extended JSON&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;writing:9a3f4a06c5e6703b45401d6d4a0f6eef&#34;&gt;Writing&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_IBsonWriter.htm
&#34;&gt;&lt;code&gt;IBsonWriter&lt;/code&gt;&lt;/a&gt; interface contains all the methods necessary to write a &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt; document or a &lt;a href=&#34;http://json.org&#34;&gt;JSON&lt;/a&gt; document. There is an implementation for each format.&lt;/p&gt;

&lt;h3 id=&#34;bson-1:9a3f4a06c5e6703b45401d6d4a0f6eef&#34;&gt;BSON&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_BsonBinaryWriter.htm
&#34;&gt;&lt;code&gt;BsonBinaryWriter&lt;/code&gt;&lt;/a&gt; is for writing binary BSON. For example, to write the document &lt;code&gt;{ a: 1 }&lt;/code&gt; to a BSON file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string outputFileName; // initialize to the file to write to.

using (var stream = File.OpenWrite(outputFileName))
using (var writer = new BsonBinaryWriter(stream))
{
    writer.WriteStartDocument();
    writer.WriteName(&amp;quot;a&amp;quot;);
    writer.WriteInt32(1);
    writer.WriteEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;json-1:9a3f4a06c5e6703b45401d6d4a0f6eef&#34;&gt;JSON&lt;/h3&gt;

&lt;p&gt;In the same way, we can write a JSON string using a &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonWriter.htm
&#34;&gt;&lt;code&gt;JsonWriter&lt;/code&gt;&lt;/a&gt;. For example, to write the document &lt;code&gt;{ a: 1 }&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string outputFileName; // initialize to the file to write to.

using (var output = new StreamWriter(outputFileName))
using (var writer = new JsonWriter(output))
{
    writer.WriteStartDocument();
    writer.WriteName(&amp;quot;a&amp;quot;);
    writer.WriteInt32(1);
    writer.WriteEndDocument();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;settings:9a3f4a06c5e6703b45401d6d4a0f6eef&#34;&gt;Settings&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonWriter.htm
&#34;&gt;&lt;code&gt;JsonWriter&lt;/code&gt;&lt;/a&gt; supports writing strict JSON as well as both flavors of &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/
&#34;&gt;MongoDB Extended JSON&lt;/a&gt;. This, and other things, can be customized with the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/T_MongoDB_Bson_IO_JsonWriterSettings.htm
&#34;&gt;&lt;code&gt;JsonWriterSettings&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;For instance, to write in a format for the &lt;a href=&#34;https://www.mongodb.com/docs/manual/administration/scripting/&#34;&gt;MongoDB Shell&lt;/a&gt;, you can set the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/P_MongoDB_Bson_IO_JsonWriterSettings_OutputMode.htm
&#34;&gt;&lt;code&gt;OutputMode&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;Shell&lt;/code&gt; and also set the &lt;a href=&#34;/mongo-csharp-driver/2.0/apidocs/html/P_MongoDB_Bson_IO_JsonWriterSettings_ShellVersion.htm
&#34;&gt;&lt;code&gt;ShellVersion&lt;/code&gt;&lt;/a&gt; to the desired shell version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var settings = new JsonWriterSettings
{
    OutputMode = JsonOutputMode.Shell,
    ShellVersion = new Version(3.0) // target the syntax of MongoDB 3.0
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>